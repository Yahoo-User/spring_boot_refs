====================================================================
 & All annotations about Hibernate v5.6.15.Final
    ( Supported javax.persistence:javax.persistence-api:2.2 )
====================================================================

-------------------------
01. @DynamicInsert
-------------------------

	- Refs: https://chat.openai.com/share/e737f04b-d766-4bcb-90fa-23c95a67a278

	- For inserting, should this entity use dynamic sql generation where `only non-null` columns get referenced in the prepared sql statement ?
	- Should dynamic insertion be used for this entity ? true says dynamic insertion will be used.
	- Default is true (since generally this annotation is NOT used unless the user wants dynamic insertion).
 

-------------------------
 02. @DynamicUpdate
-------------------------

	- Refs: https://chat.openai.com/share/08e1b69a-e5de-4f3c-a71c-c2f1c44c645f

	- For updating, should this entity use dynamic sql generation where `only changed` columns get referenced in the prepared sql statement? 
	- Note, for re-attachment of detached entities, this is NOT possible without `select-before-update` being enabled.

	- See Also:
				@SelectBeforeUpdate
 

-------------------------
 03. @SelectBeforeUpdate
-------------------------

	- Refs: https://chat.openai.com/share/1b0a39bc-3947-4422-917c-629735a838c2

	- Should the entity's current state be selected from the database
		when determining whether to perform an update when re-attaching detached entities ?

	- `true` (which is the default when this annotation is present) indicates that `select-before-update` processing should occur.
	- `false` indicates `select-before-update` processing should NOT occur.
 

-------------------------
 04. @ValueGenerationType
-------------------------

	- Refs: https://chat.openai.com/share/b0f534ba-fee2-4115-81ce-b89de2a69a7e

	- Marks an annotation type as a `@generator` annotation type. 

	- Adding a `@generator` annotation to an entity property causes the value of the property to be generated upon insertor update of the owning entity.
		Not more than one `@generator` annotation may be placed on a given property. 
	- Each `@generator` annotation type is associated with a `AnnotationValueGeneration` which implements the `strategy` for generating the value.
	- `@Generator` annotation types may define arbitrary custom attributes, 
		e.g. allowing the client to configure the generation timing (if applicable) or other settings taking an effect on the value generation.
	- The corresponding implementation can retrieve these settings from the annotation instance passed to `AnnotationValueGeneration.initialize(java.lang.annotation.Annotation, Class)`. 
	- Custom `@generator` annotation types must have retention policy `RetentionPolicy.RUNTIME`.


-------------------------
 05. @GenericGenerator
-------------------------

	- Refs: https://chat.openai.com/share/b0750b9d-b3f7-403e-9ea5-e7e7f0a8dda5

	- `@Generator` annotation describing any kind of Hibernate generator in a generic (de-typed) manner.
 

-------------------------
 03. @CurrentTimestamp
-------------------------

	- Refs: https://chat.openai.com/share/3949bfed-28ad-468e-8cbe-39730fdea260

	- Specifies that the annotated field of property is a generated timestamp, 
	- and also specifies the timing of the timestamp generation, 
	- and whether it is generated in Java or by the database: 
			•source = VM indicates that the virtual machine current instantis used, and 
			•source = DB indicates that the database `current_timestamp` function should be used. 
	- By default, the timestamp is generated by the database, which requires an extra round trip to the database to fetch the generated value. 
	- This annotation may be used in combination with the JPA-defined `jakarta.persistence.Version` annotation. 

	- The annotated property may be of any one of the following types: 

			(01) java.util.Date
			(02) java.util.Calendar
			(03) java.sql.Date
			(04) java.sql.Time
			(05) java.sql.Timestamp
			(06) java.time.Instant
			(07) java.time.LocalDate
			(08) java.time.LocalDateTime
			(09) java.time.LocalTime
			(10) java.time.MonthDay
			(11) java.time.OffsetDateTime
			(12) java.time.OffsetTime
			(13) java.time.Year
			(14) java.time.YearMonth
			(15) java.time.ZonedDateTime

	- Since:	6.0

	- See Also:
				@UpdateTimestamp
				@CreationTimestamp
				org.hibernate.generator.internal.CurrentTimestampGeneration
 

-------------------------
 03. @UpdateTimestamp
-------------------------

	- Refs: https://chat.openai.com/share/3c76cea5-626f-4dbc-8c43-4f249d3cc3b7

	- Supported property types: 
	
			(01) java.util.Date
			(02) java.util.Calendar
			(03) java.sql.Date
			(04) java.sql.Time
			(05) java.sql.Timestamp
			(06) java.time.Instant
			(07) java.time.LocalDate
			(08) java.time.LocalDateTime
			(09) java.time.LocalTime
			(10) java.time.MonthDay
			(11) java.time.OffsetDateTime
			(12) java.time.OffsetTime
			(13) java.time.Year
			(14) java.time.YearMonth
			(15) java.time.ZonedDateTime

	- Marks a property as the update timestamp of the containing entity.
	- The property value will be set to the current VM date whenever the owning entity is updated. 
	- Specifies that the annotated field of property is a generated update timestamp.
	- The timestamp is regenerated every time an entity instance is updated in the database. 
	- By default, the timestamp is generated in memory, but this may be changed by explicitly specifying the source.
	- Otherwise, this annotation is a synonym for `@CurrentTimestamp(source=VM)`.

	- See Also:
				@CurrentTimestamp
 

-------------------------
 03. @CreationTimestamp
-------------------------

	- Refs: https://chat.openai.com/share/1b3a3526-566f-4e1f-af9d-f1d406af1919

	- Marks a property as the creation timestamp of the containing entity.
	- The property value will be set to the current VM date `exactly once` when saving the owning entity for the first time.

	- Specifies how the timestamp is generated.
	- By default, it is generated in memory, which saves a round trip to the database.
	- Note: Specifies the source of a generated value, either the virtual machine,or the database.
	- Default: SourceType.VM

	- Supported property types: 

			(01) java.util.Date
			(02) java.util.Calendar
			(03) java.sql.Date
			(04) java.sql.Time
			(05) java.sql.Timestamp
			(06) java.time.Instant
			(07) java.time.LocalDate
			(08) java.time.LocalDateTime
			(09) java.time.LocalTime
			(10) java.time.MonthDay
			(11) java.time.OffsetDateTime
			(12) java.time.OffsetTime
			(13) java.time.Year
			(14) java.time.YearMonth
			(15) java.time.ZonedDateTime
 

-------------------------
 03. @Check
-------------------------

	- Refs: https://chatgpt.com/share/462463ed-1b2f-49be-9490-ee51876c307c
					https://chatgpt.com/share/1e1a107b-97da-43d1-aab4-438794ac9eed

	- 
 

-------------------------
 03. @
-------------------------

	- Refs: 
 

-------------------------
 03. @
-------------------------

	- Refs: 
 

-------------------------
 03. @
-------------------------

	- Refs: 
 

-------------------------
 03. @
-------------------------

	- Refs: 
 

-------------------------
 03. @
-------------------------

	- Refs: 
 

-------------------------
 03. @
-------------------------

	- Refs: 
 

-------------------------
 03. @
-------------------------

	- Refs: 
 

-------------------------
 03. @
-------------------------

	- Refs: 
 

-------------------------
 03. @
-------------------------

	- Refs: 
 

-------------------------
 03. @
-------------------------

	- Refs: 
 

-------------------------
 03. @
-------------------------

	- Refs: 
 

-------------------------
 03. @
-------------------------

	- Refs: 
 

-------------------------
 03. @
-------------------------

	- Refs: 
 

-------------------------
 03. @
-------------------------

	- Refs: 



