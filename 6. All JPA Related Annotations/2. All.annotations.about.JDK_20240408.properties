====================================================================
 & All annotations about JDK
====================================================================

-------------------------
01. @Repeatable
-------------------------

   - Refs: https://chat.openai.com/share/c78d737f-7d8c-48fa-a0e6-3e0b9c212230

   - The annotation interface `java.lang.annotation.Repeatable` is used to indicate that the annotation interface whose declaration it (meta-)annotates is repeatable.
   - The value of `@Repeatable` indicates the containing annotation interface for the `repeatable` annotation interface.

   - Since:â€¢ 1.8
   
   - @jls 9.6.3 Repeatable Annotation Interfaces
   - @jls 9.7.5 Multiple Annotations of the Same Interface


-------------------------
02. @Serial
-------------------------

   - Refs: https://chat.openai.com/share/0bbc1514-ab64-42de-b313-132bacdac91a

   - Indicates that an annotated field or method is part of the serialization mechanism defined by the Java Object Serialization Specification.
   - This annotation type is intended to allow compile-time checking of serialization-related declarations, analogous to the checking enabled 
      by the java.lang.Override annotation type to validate method overriding.
   - Serializable classes are encouraged to use `@Serial` annotations to help a compiler catch mis-declared serialization-related fields
      and methods, mis-declarations that may otherwise be difficult to detect. 
   - Specifically, annotations of this type should be applied to serialization-related methods and fields in classes declared to be Serializable.

   - The five serialization-related methods are: 
         (1) private void writeObject(java.io.ObjectOutputStream stream) throws IOException 
         (2) private void readObject(java.io.ObjectInputStream stream) throws IOException, ClassNotFoundException 
         (3) private void readObjectNoData() throws ObjectStreamException 
         (4) ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException 
         (5) ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException 

   - The two serialization-related fields are: 
         (1) private static final ObjectStreamField[] serialPersistentFields 
         (2) private static final long serialVersionUID 

   - Compilers are encouraged to validate that a method or field marked with a `@Serial` annotation is one of the defined serialization-related methods 
      or fields declared in a meaningful context and issue a warning if that is NOT the case. 

   - It is a semantic error to apply this annotation to other fields or methods, including: 
         (1) fields or methods in a class that is NOT Serializable 
         (2) fields or methods of the proper structural declaration, but in a type where they are ineffectual. 
               For example, enum types are defined to have a `serialVersionUID` of `0L` so a `serialVersionUID` field declared in an enum type is ignored. 
               The five serialization-related methods identified above are likewise ignored for an enum type. 
         (3) in a class that is Externalizable: 
                  - method declarations of writeObject, readObject, and readObjectNoData 
                  - a field declaration for serialPersistentFields 

   - While the Externalizable interface extends Serializable, the three methods and one field above are NOT used for externalizable classes. 
   - Note that serialization mechanism accesses its designated fields and methods reflectively and those fields and methods may appear otherwise unused in a Serializable class.

   - Since: 14

   - See Also:
            @Serializable
            @Externalizable


-------------------------
99. @Externalizable
-------------------------

   - Refs: https://chat.openai.com/share/c4d0995b-f032-4596-a38d-093cc9d36de4

   - Only the identity of the class of an `Externalizable` instance is written in the serialization stream and it is the responsibility of the class to save 
      and restore the contents of its instances.
   - The `writeExternal` and `readExternal` methods of the `Externalizable` interface are implemented by a class 
      to give the class complete control over the format and contents of the stream for an objectand its supertypes.
   - These methods must explicitly coordinate with the supertype to save its state.
   - These methods supersede customized implementations of `writeObject` and `readObject` methods.
   - Object Serialization uses the `Serializable` and `Externalizable` interfaces.
   - Object persistence mechanisms can use them as well. 
   - Each object to be stored is tested for the Externalizable interface. 
   - If the object supports Externalizable, the `writeExternal` method is called. 
   - If the object does NOT support `Externalizable` and does implement `Serializable`, the object is saved using `ObjectOutputStream`. 
   - When an `Externalizable` object is reconstructed, an instance is created using the public no-arg constructor, then the `readExternal` method called.
   - Serializable objects are restored by reading them from an ObjectInputStream.
   - An Externalizable instance can designate a substitution object via the `writeReplace` and `readResolve` methods documented in the `Serializable` interface.

   - Since: 1.1
   - See Also:
         java.io.ObjectOutputStream
         java.io.ObjectInputStream
         java.io.ObjectOutput
         java.io.ObjectInput
         java.io.Serializable


-------------------------
99. @
-------------------------

   - Refs: 

   - 


-------------------------
99. @
-------------------------

   - Refs: 

   - 


-------------------------
99. @
-------------------------

   - Refs: 

   - 


-------------------------
99. @
-------------------------

   - Refs: 

   - 


-------------------------
99. @
-------------------------

   - Refs: 

   - 


-------------------------
99. @
-------------------------

   - Refs: 

   - 


-------------------------
99. @
-------------------------

   - Refs: 

   - 


-------------------------
99. @
-------------------------

   - Refs: 

   - 


-------------------------
99. @
-------------------------

   - Refs: 

   - 


-------------------------
99. @
-------------------------

   - Refs: 

   - 


-------------------------
99. @
-------------------------

   - Refs: 

   - 


-------------------------
99. @
-------------------------

   - Refs: 

   - 


-------------------------
99. @
-------------------------

   - Refs: 

   - 


-------------------------
99. @
-------------------------

   - Refs: 

   - 


-------------------------
99. @
-------------------------

   - Refs: 

   - 


