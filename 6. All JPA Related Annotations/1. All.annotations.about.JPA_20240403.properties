====================================================================
 & All annotations about JPA entity class in the javax.persistence api v2.2
    ( javax.persistence:javax.persistence-api:2.2 )
====================================================================

-------------------------
01. @Entity
-------------------------

	- Refs: https://chat.openai.com/share/705f5db5-c365-4a09-844f-91b304ef8338

	- Specifies that the class is an entity.
	- This annotation is applied to the `entity class`.
	- Since: Java Persistence 1.0
 

-------------------------
 02. @Table
-------------------------

	- Refs: https://chat.openai.com/share/cf12e460-be90-4198-a533-ca93fa75dc08

	- Specifies the primary table for the annotated entity.
	- Additional tables may be specified using `@SecondaryTable` or `@SecondaryTables` annotation. 
	- If no `@Table` annotation is specified for an `entity class`, the default values apply. 

	- Example:

		    @Entity
		    @Table( name="CUST", schema="RECORDS" )
		    public class Customer { ... }
	 
	- Since: Java Persistence 1.0


-------------------------
 03. @Id
-------------------------

	- Refs: https://chat.openai.com/share/4105457c-9d91-4ef9-8bc3-9ca7529f2f75

	- Specifies the primary key of an entity.

	- The field or property to which the `@Id` annotation is applied should be one of the following types: 

			(1) any Java primitive type;
			(2) any primitive wrapper type; String / java.util.Date / java.sql.Date / java.math.BigDecimal / java.math.BigInteger.

	- The mapped column for the primary key of the entity is assumed to be the primary key of the primary table.
	- If no `@Column` annotationis specified, the primary key column name is assumed to be the name of the primary key property or field. 

	- Example:
 
		   @Id
		   public Long getId() { return id; }
	 
	- Since: Java Persistence 1.0
	- See Also:
				@Column
				@GeneratedValue
 

-------------------------
 04. @GeneratedValue
-------------------------

	- Refs: https://chat.openai.com/share/abc83ddc-69d5-42e4-b263-6975b368ff40

	- Provides for the specification of generation strategies for the values of primary keys.
	- The `@GeneratedValue` annotation may be applied to a primary key property or field of an `entity` or `mapped superclass` in conjunction with the `@Id` annotation.
	- The use of the `@GeneratedValue` annotation is only required to be supported for simple primary keys. 
	- Use of the `@GeneratedValue` annotation is not supported for derived primary keys. 

	- Example 1:

		     @Id
		     @GeneratedValue( strategy=SEQUENCE, generator="CUST_SEQ" )			// AUTO, IDENTITY, SEQUENCE, TABLE
		     @Column( name="CUST_ID" )
		     public Long getId() { return id; }

	- Example 2:

		     @Id
		     @GeneratedValue( strategy=TABLE, generator="CUST_GEN" )					// AUTO, IDENTITY, SEQUENCE, TABLE
		     @Column( name="CUST_ID")
		     Long id;
 
	- Since:• Java Persistence 1.0
	- See Also:
			@Id
			@TableGenerator
			@SequenceGenerator


-------------------------
05. @Column
-------------------------

	- Refs: https://chat.openai.com/share/67260319-353f-4f71-b559-75ac52fb747e

	- Specifies the mapped column for a persistent property or field.
	- If no `@Column` annotation is specified, the default values apply. 
	
	- Example 1:

		    @Column( name="DESC", nullable=false, length=512 )
		    public String getDescription() { return description; }
	    
	- Example 2:

		    @Column( name="DESC", columnDefinition="CLOB NOT NULL", table="EMP_DETAIL" )
		    @Lob
		    public String getDescription() { return description; }
	    
	- Example 3:

		    @Column( name="ORDER_COST", updatable=false, precision=12, scale=2 )
		    public BigDecimal getCost() { return cost; }

	- Since:• Java Persistence 1.0


-------------------------
06. @TableGenerator
-------------------------

	- Refs: https://chat.openai.com/share/d6bbf897-a4db-4815-ad2c-257ffad61e23

	- Defines a primary key generator that may be referenced by name when a generator element is specified for the `@GeneratedValue` annotation.
	- A table generator may be specified on the `entity class` or on the primary key field or property.
	- The scope of the generator name is global to the persistence unit (across all generator types).

	- Example 1:
    
		    @Entity public class Employee {
		        ...
		        @Id
		        @TableGenerator( name="empGen", table="ID_GEN", pkColumnName="GEN_KEY", valueColumnName="GEN_VALUE", pkColumnValue="EMP_ID", allocationSize=1 )
		        @GeneratedValue(strategy=TABLE, generator="empGen")
		        int id;
		        ...
		    }

	- Example 2:
    
		    @Entity public class Address {
		        ...
		        @Id
		        @TableGenerator( name="addressGen", table="ID_GEN", pkColumnName="GEN_KEY", valueColumnName="GEN_VALUE", pkColumnValue="ADDR_ID" )
		        @GeneratedValue( strategy=TABLE, generator="addressGen" )
		        int id;
		        ...
		    }
 
	- Since:• Java Persistence 1.0
	- See Also: @GeneratedValue


-------------------------
07. @Lob
-------------------------

	- Refs: https://chat.openai.com/share/84970d00-af24-431b-89b2-bed8d9488b2f

	- Specifies that a persistent property or field should be persisted as a large object to a database-supported large object type. 
	- Portable applications should use the `@Lob` annotation when mapping to a database `Lob` type.
	- The `@Lob` annotation may be used in conjunction with the `@Basic` annotation or the `@ElementCollection` annotation
		when the element collection value is of basic type.
	- A `Lob` may be either a binary or character type. 
	- The Lob type is inferred from the type of the persistent field or property, and except for string and character-based types defaults to Blob. 

	- Example 1:

				@Lob
				@Basic( fetch=LAZY )
				@Column( name="REPORT" )
				protected String report;

	- Example 2:

				@Lob
				@Basic(fetch=LAZY)
				@Column( name="EMP_PIC", columnDefinition="BLOB NOT NULL" )
				protected byte[] pic;

 	- Since:	Java Persistence 1.0
 	- See Also: 
 				@Basic
 				@ElementCollection


-------------------------
08. @Basic
-------------------------

	- Refs: https://chat.openai.com/share/f9693097-75d2-4eac-ac56-0542220d5a49

	- The simplest type of mapping to a database column.

	- The `@Basic` annotation can be applied to a persistent property or instance variable of any of the following types:

			(01) Java primitive types
			(02) wrappers of the primitive types
			(03) String
			(04) java.math.BigInteger
			(05) java.math.BigDecimal
			(06) java.util.Date
			(07) java.util.Calendar
			(08) java.sql.Date
			(09) java.sql.Time
			(10) java.sql.Timestamp
			(11) byte[]
			(12) Byte[]
			(13) char[]
			(14) Character[]
			(15) enums
			(16) and any other type that implements java.io.Serializable

	- The use of the `@Basic` annotation is optional for persistent fields and properties of these types.
	- If the `@Basic` annotation is NOT specified for such a field or property,  the default values of the `@Basic` annotation will apply. 

    - Example 1:

		    @Basic
		    protected String name;

    - Example 2:

		    @Basic(fetch=LAZY)
		    protected String getName() { return name; }

	- Since:• Java Persistence 1.0


-------------------------
09. @UniqueConstraint
-------------------------

	- Refs: https://chat.openai.com/share/9a22bba7-ab7b-4935-9e27-6bb411c098b3
	
	- Specifies that a unique constraint is to be included in the generated DDL for a primary or secondary table. 

	-	Example:

		    @Entity
		    @Table(
		        name="EMPLOYEE", 
		        uniqueConstraints= @UniqueConstraint(columnNames={"EMP_ID", "EMP_NAME"})
		    )
		    public class Employee { ... }
		 
	- Since: Java Persistence 1.0


-------------------------
10. @Index
-------------------------

	- Refs: https://chat.openai.com/share/752e5e56-11e9-4166-801f-cfb28218a431

	- Used in schema generation to specify creation of an index. 
	- Note that it is NOT necessary to specify an index for a primary key, as the primary key index will be created automatically. 
	- The syntax of the columnList element is a column_list, as follows:

	    column::= index_column [,index_column]*
	    index_column::= column_name [ASC | DESC]
 
	- If ASC or DESC is NOT specified, ASC (ascending order) is assumed.

	- Since:• Java Persistence 2.1
	- See Also:

			@Table
			@SecondaryTable
			@CollectionTable
			@JoinTable
			@TableGenerator


-------------------------
11. @Temporal
-------------------------

	- Refs: https://chat.openai.com/share/570ec78e-b2a2-40c1-ada2-b8d344ffffdd

	- This annotation must be specified for persistent fields or properties of type :

			(1) java.util.Date
			(2) java.util.Calendar
			(3) java.util.GregorianCalendar

	- It may only be specified for fields or properties of these types. 

	- The `@Temporal` annotation may be used in conjunction with 

			(1) the `@Basic` annotation, 
			(2) the `@Id` annotation, or 
			(3) the `@ElementCollection` annotation (when the element collection value is of such a temporal type). 
    
	- Example:
 
			@Temporal(DATE)
			protected java.util.Date endDate;
		 
	- Since:	Java Persistence 1.0


-------------------------
12. @Transient
-------------------------

	- Refs: https://chat.openai.com/share/02fb4895-684d-4dbf-8a7d-7cc1207af9c1

	- Specifies that the property or field is NOT persistent.
	- It is used to annotate a property or field of an entity class, mapped superclass, or embeddable class. 
   
   - Example:

		    @Entity
		    public class Employee {
		        @Id int id;
		        @Transient User currentUser;
		        ...
		    }
 
	- Since: Java Persistence 1.0



-------------------------
13. @SequenceGenerator
-------------------------

	- Refs: https://chat.openai.com/share/7d4750ba-6f86-4470-badb-20e1b105492b

	- Defines a primary key generator that may be referenced by name when a generator element is specified for the `@GeneratedValue` annotation.
	- A sequence generator may be specified on the entity class or on the primary key field or property.
	- The scope of the generator name is global to the persistence unit (across all generator types). 

   - Example:

   		@SequenceGenerator( name="EMP_SEQ", allocationSize=25 )
			@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "EMP_SEQ")
 
	- Since: Java Persistence 1.0


-------------------------
14. @
-------------------------

	- Refs: 


-------------------------
15. @
-------------------------

	- Refs: 


-------------------------
16. @Enumerated
-------------------------

	- Refs: https://chat.openai.com/share/acc24a35-44fa-48a0-8305-3630b45a6062

	- Specifies that a persistent property or field should be persisted as a `enumerated` type.

	- The `@Enumerated` annotation may be used in conjunction with the `@Basic` annotation, or in conjunction with the `@ElementCollection` annotation
		when the element collection value is of basic type.

	- If the `enumerated` type is NOT specified or the `@Enumerated` annotation is NOT used, the `EnumType` value is assumed to be `ORDINAL`. 
   
   - Example:

			   public enum EmployeeStatus { FULL_TIME, PART_TIME, CONTRACT }
			   public enum SalaryRate { JUNIOR, SENIOR, MANAGER, EXECUTIVE }

			   @Entity
			   public class Employee {
		       		public EmployeeStatus getStatus() {...}
				       ...
				       @Enumerated(STRING)
				       public SalaryRate getPayScale() {...}
				       ...
			   }
 
	- Since:	Java Persistence 1.0

	- See Also:
				@Basic
				@ElementCollection


-------------------------
17. @Access
-------------------------

	- Refs: https://chat.openai.com/share/3dd10c52-066b-41f3-8774-8e1c4c8d92ff

	- Used to specify an access type to be applied to an entity class, mapped superclass, or embeddable class, or to a specific attribute of such a class.

	- Since:	Java Persistence 2.0


-------------------------
18. @JoinColumn
-------------------------

	- Refs: https://chat.openai.com/share/a8177292-6382-478d-86d6-1b13ef1b97d9

	- Specifies a column for joining an entity association or element collection.

	- If the `@JoinColumn` annotation itself is defaulted, a single join column is assumed and the default values apply. 
   
   - Example:

			@ManyToOne
			@JoinColumn(name="ADDR_ID")										// To specify a FK column name (`ADDR_ID`) of the `Child` table.
			public Address getAddress() { return address; }

	- Example: `Uni-directional one-to-many` association using a `foreign key` mapping
 
			// In Customer class
			@OneToMany
			@JoinColumn(name="CUST_ID") 										// Join Column is in table for Order
			public Set<Order> getOrders() { return orders; }
 
	- Since:	Java Persistence 1.0

	- See Also:
			@ManyToOne
			@OneToMany
			@OneToOne
			@JoinTable
			@CollectionTable
			@ForeignKey


-------------------------
19. @ManyToOne
-------------------------

	- Refs: https://chat.openai.com/share/a91d5ae4-5918-4bbe-91d9-c1c039ac1938

	- Specifies a single-valued association to another entity class that has `many-to-one` multiplicity. 
	- It is NOT normally necessary to specify the target entity explicitly since it can usually be inferred from the type of the object being referenced.
	- If the relationship is bi-directional, the non-owning `OneToMany` entity side must used the `mappedBy` element
		to specify the relationship field or property of the entity that is the owner of the relationship.

	- The `@ManyToOne` annotation may be used within an `embeddable` class to specify a relationship from the `embeddable` class to an `entity` class.

	- If the relationship is bi-directional, the non-owning `OneToMany` entity side must use the `mappedBy` element of the `@OneToMany` annotation
		to specify the relationship field or property of the `embeddable` field or property on the owning side of the relationship.

	- The dot (".") notation syntax must be used in the `mappedBy` element to indicate the relationship attribute within the `embedded` attribute.
	- The value of each identifier used with the dot notation is the name of the respective embedded field or property. 

   - Example 1:

		     @ManyToOne(optional=false) 
		     @JoinColumn(name="CUST_ID", nullable=false, updatable=false)
		     public Customer getCustomer() { return customer; }

   - Example 2:
 
		     @Entity
	        public class Employee {
			        @Id int id;
			        @Embedded JobInfo jobInfo;
			        ...
		     }

		     @Embeddable
	        public class JobInfo {
			        String jobDescription; 
			        @ManyToOne ProgramManager pm; // Bidirectional
		     }

		     @Entity
	        public class ProgramManager {
			        @Id int id;
			        @OneToMany(mappedBy="jobInfo.pm")
			        Collection<Employee> manages;
		     }

	- Since:	Java Persistence 1.0


-------------------------
20. @MappedSuperclass
-------------------------

	- Refs: https://chat.openai.com/share/2759331f-ebfc-482c-bcf7-1bdc4331d070

	- Designates a class whose mapping information is applied to the entities that inherit from it. 	<--- ***
	- A mapped superclass has no separate table defined for it.		<--- ***

	- A class designated with the `@MappedSuperclass` annotation can be mapped in the same way as an entity
		except that the mappings will apply only to its subclasses since no table exists for the mapped superclass itself.	(***)

	- When applied to the subclasses, the inherited mappings will apply in the context of the subclass tables.

	- Mapping information may be overridden in such subclasses
		by using the `@AttributeOverride` and `@AssociationOverride` annotations or corresponding XML elements. 
   
   - Example: `Concrete class` as a mapped superclass

				@MappedSuperclass
				public class Employee {
						@Id protected Integer empId;								// PK
						@Version protected Integer version;

						@ManyToOne
						@JoinColumn(name="ADDR")							// FK
						protected Address address;

						public Integer getEmpId() { ... }
						public void setEmpId(Integer id) { ... }
						public Address getAddress() { ... }
						public void setAddress(Address addr) { ... }
				}
    
				// Default table is `FTEMPLOYEE` table
				@Entity
				public class FTEmployee extends Employee {
						// Inherited empId field mapped to FTEMPLOYEE.EMPID
						// Inherited version field mapped to FTEMPLOYEE.VERSION
						// Inherited address field mapped to FTEMPLOYEE.ADDR fk

						// Defaults to FTEMPLOYEE.SALARY
						protected Integer salary;

						public FTEmployee() {}

						public Integer getSalary() { ... }
						public void setSalary(Integer salary) { ... }
				}
    
				@Entity
				@Table(name="PT_EMP")
				@AssociationOverride(name="address", joincolumns=@JoinColumn(name="ADDR_ID"))
				public class PartTimeEmployee extends Employee {
						// Inherited empId field mapped to PT_EMP.EMPID
						// Inherited version field mapped to PT_EMP.VERSION
						// address field mapping overridden to PT_EMP.ADDR_ID fk

						@Column(name="WAGE")
						protected Float hourlyWage;

						public PartTimeEmployee() {}

						public Float getHourlyWage() { ... }
						public void setHourlyWage(Float wage) { ... }
				} // end class
 
	- Since:	Java Persistence 1.0
	- See Also:
				@AttributeOverride
				@AssociationOverride


-------------------------
21. @AttributeOverride
-------------------------

	- Refs: https://chat.openai.com/share/a8fd886f-850c-4ef4-b623-1e1527862f60

	- Used to override the mapping of a `Basic` (whether explicit or default) property or field or `Id` property or field. 
	- May be applied to an entity that extends a mapped superclass or to an embedded field or property to override a basic mapping or id mapping 
		defined by the mapped superclass or embeddable class (or embeddable class of one of its attributes). 
	- May be applied to an element collection containing instances of an embeddable class or to a map collection whose key and/or value is an embeddable class.
	- When `AttributeOverride` is applied to a map, "key." or "value." must be used to prefix the name of the attribute that is being overridden in order to specify it as part of the map key or map value. 
	- To override mappings at multiple levels of embedding, a dot (".") notation form must be used in the name element to indicate an attribute within an embedded attribute.
	- The value of each identifier used with the dot notation is the name of the respective embedded field or property. 
	- If `@AttributeOverride` is NOT specified, the column is mapped the same as in the original mapping. 
   
   - Example 1:

		    @MappedSuperclass
		    public class Employee {
					@Id protected Integer id;
					@Version protected Integer version;
					protected String address;
					public Integer getId() { ... }
					public void setId(Integer id) { ... }
					public String getAddress() { ... }
					public void setAddress(String address) { ... }
		    }

			@Entity
			@AttributeOverride(name="address", column=@Column(name="ADDR"))
			public class PartTimeEmployee extends Employee {
					// address field mapping overridden to ADDR
					protected Float wage();
					public Float getHourlyWage() { ... }
					public void setHourlyWage(Float wage) { ... }
			}
 
	- Example 2:

			@Embeddable public class Address {
					protected String street;
					protected String city;
					protected String state;
					@Embedded protected Zipcode zipcode;
			}

			@Embeddable public class Zipcode {
					protected String zip;
					protected String plusFour;
			}

			@Entity public class Customer {
			@Id protected Integer id;
			protected String name;
			@AttributeOverrides({
				   @AttributeOverride(name="state", column=@Column(name="ADDR_STATE")),
				   @AttributeOverride(name="zipcode.zip", column=@Column(name="ADDR_ZIP"))
			})
			@Embedded protected Address address;
					...
			}

	- Example 3:

			@Entity public class PropertyRecord {
					@EmbeddedId PropertyOwner owner;
					@AttributeOverrides({ 
							@AttributeOverride(name="key.street", column=@Column(name="STREET_NAME")),
							@AttributeOverride(name="value.size", column=@Column(name="SQUARE_FEET")),
							@AttributeOverride(name="value.tax", column=@Column(name="ASSESSMENT"))
					})
					@ElementCollection
					Map<Address, PropertyInfo> parcels;
			}

			@Embeddable public class PropertyInfo {
					Integer parcelNumber;
					Integer size;
					BigDecimal tax;
			}

	- Since:	Java Persistence 1.0

	- See Also:
			@Embedded
			@Embeddable
			@MappedSuperclass
			@AssociationOverride


-------------------------
22. @OrderColumn
-------------------------

	- Refs: https://chat.openai.com/share/b19e650d-c02e-420c-a2e2-961b87d241e8

	- Specifies a column that is used to maintain the persistent order of a list.
	- The persistence provider is responsible for maintaining the order upon retrieval and in the database.
	- The persistence provider is responsible for updating the ordering upon flushing to thedatabase to reflect any insertion, deletion, or reordering affecting the list. 
	- The `@OrderColumn` annotation is specified on a `OneToMany` or `ManyToMany` relationship or on an element collection.
	- The `@OrderColumn` annotation is specified on the side of the relationship that references the collection that is to be ordered.
	- The order column is NOT visible as part of the state of the entity or embeddable class. 
	- The `@OrderBy` annotation should be used for ordering that is visible as persistent state and maintained by the application.
	- The `@OrderBy` annotation is NOT used when `OrderColumn` is specified. 
	- The order column must be of integral type.
	- The persistence provider maintains a contiguous (non-sparse) ordering of the values of the order column when updating the association or element collection.
	- The order column value for the first element is 0. 

 	- Example:

			@Entity
			public class CreditCard {

				@Id long ccNumber;
l
				@OneToMany  // unidirectional
				@OrderColumn
				List<CardTransaction> transactionHistory;
				...
			}

	- Since:	Java Persistence 2.0
	- See Also:
			@OrderBy


-------------------------
23. @OrderBy
-------------------------

	- Refs: https://chat.openai.com/share/ee2e3208-0040-4fd0-ace9-d6c00a167068

	- Specifies the ordering of the elements of a collection valued association or element collection at the point when the association or collection is retrieved. 

	- The syntax of the value ordering element is an orderby_list, as follows:

			orderby_list::= orderby_item [,orderby_item]*
			orderby_item::= [property_or_field_name] [ASC | DESC]
 
 	- If `ASC` or `DESC` is NOT specified, `ASC` (ascending order) is assumed. 
	- If the ordering element is NOT specified for an entity association, ordering by the primary key of the associated entity is assumed. 
	- The property or field name must correspond to that of a persistent property or field of the associated class or embedded class within it.
	- The properties or fields used in the ordering must correspond to columns for which comparison operators are supported. 
	- The dot (".") notation is used to refer to an attribute within an embedded attribute.
	- The value of each identifier used with the dot notation is the name of the respective embedded field or property. 
	- The `@OrderBy` annotation may be applied to an element collection.
	- When `@OrderBy` is applied to an element collection of basic type, the ordering will be by value of the basic objects and the property or field name is NOT used.
	- When specifying an ordering over an element collection of embeddable type, the dot notation must be used to specify the attribute or attributes that determine the ordering. 
	- The `@OrderBy` annotation is NOT used when an order column is specified. 

   - Example 1:
    
		    @Entity 
		    public class Course {
					...
					@ManyToMany
					@OrderBy("lastname ASC")
					public List<Student> getStudents() {...};
					...
		    }
    
	- Example 2:

			@Entity 
			public class Student {
					...
					@ManyToMany(mappedBy="students")
					@OrderBy // ordering by primary key is assumed
					public List<Course> getCourses() {...};
					...
			}

	- Example 3: 

			@Entity 
			public class Person {
					...
					@ElementCollection
					@OrderBy("zipcode.zip, zipcode.plusFour")
					public Set<Address> getResidences() {...};
					...
			}

			@Embeddable 
			public class Address {
					protected String street;
					protected String city;
					protected String state;
					@Embedded protected Zipcode zipcode;
			}

			@Embeddable 
			public class Zipcode {
					protected String zip;
					protected String plusFour;
			}
 
	- Since:	Java Persistence 1.0

	- See Also:
			@OrderColumn


-------------------------
24. @Version
-------------------------

	- Refs: https://chat.openai.com/share/267943d6-9aa2-478a-b81d-35db2d4c31f8

	- Specifies the version field or property of an entity class that serves as its optimistic lock value.
	- The version is used to ensure integrity when performing the merge operation and for optimistic concurrency control. 
	- Only a single Version property or field should be used per class; 
		applications that use more than one Version property or field will not be portable. 
	- The Version property should be mapped to the primary table for the entity class; 
		applications that map the Version property to a table other than the primary table will not be portable. 
	- The following types are supported for version properties: int, Integer, short, Short, long, Long, java.sql.Timestamp. 
   
   - Example:

			 @Version
			 @Column(name="OPTLOCK")
			 protected int getVersionNum() { return versionNum; }
 
	- Since:	Java Persistence 1.0


-------------------------
25. @AssociationOverride
-------------------------

	- Refs: https://chat.openai.com/share/7a5694e2-620e-407d-960e-5c8f870c2eec

	- 


-------------------------
26. @AssociationOverrides
-------------------------

	- Refs: https://chat.openai.com/share/81721c12-76b2-4048-a844-e2cf64ae184c

	- 


-------------------------
27. @AttributeOverrides
-------------------------

	- Refs: https://chat.openai.com/share/aa07bf4e-4ae4-4dd3-81ac-d5b764c0ecde

	- 


-------------------------
28. @Cacheable
-------------------------

	- Refs: https://chat.openai.com/share/91ab855d-d263-4e5d-a52b-424f06c60c13

	- Specifies whether an entity should be cached if caching is enabled
		when the value of the `persistence.xml` caching element is `ENABLE_SELECTIVE` or `DISABLE_SELECTIVE`.
	- The value of the `@Cacheable` annotation is inherited by subclasses; it can be overridden by specifying `Cacheable` on a subclass. 
	- `@Cacheable(false)` means that the entity and its state must NOT be cached by the provider.

	- Since:	Java Persistence 2.0


-------------------------
29. @CollectionTable
-------------------------

	- Refs: https://chat.openai.com/share/6c7465e8-65b6-4c3c-a5e9-b92c20298838

	- Specifies the table that is used for the mapping of collections of basic or embeddable types.
	- Applied to the collection-valued field or property. 
	- By default, the columns of the collection table that correspond to the embeddable class or basic type are derived from the attributes of the embeddable class
		or from the basic type accordingto the default values of the `@Column` annotation.
	- In the case of a basic type, the column name is derived from the name of the collection-valued field or property.
	- In the case of an embeddable class, the column names are derived from the field or property names of the embeddable class. 
		To override the default properties of the column used for a basic type, the `@Column` annotation is used on the collection-valued attribute in addition to the `@ElementCollection` annotation. 
		To override these defaults for an embeddable class, the `@AttributeOverride` and/or `@AttributeOverrides` annotations can be used in addition to the `@ElementCollection` annotation.
	- If the embeddable class contains references to other entities, the default values for the columns corresponding to those references may be overridden 
		by means of the `@AssociationOverride` and/or `@AssociationOverrides` annotations. 
	- If the `@CollectionTable` annotation is missing, the default values of the `@CollectionTable` annotation elements apply. 
    
   - Example:

				@Embeddable public class Address {
						protected String street;
						protected String city;
						protected String state;
						... 
				}

				@Entity public class Person {
						@Id protected String ssn;
						protected String name;
						protected Address home;
						...
						@ElementCollection  // use default table (PERSON_NICKNAMES)
						@Column(name="name", length=50)
						protected Set<String> nickNames = new HashSet();
						...
				}

				@Entity public class WealthyPerson extends Person {
						@ElementCollection
						@CollectionTable(name="HOMES") // use default join column name
						@AttributeOverrides({
								@AttributeOverride(name="street", column=@Column(name="HOME_STREET")),
								@AttributeOverride(name="city", column=@Column(name="HOME_CITY")),
								@AttributeOverride(name="state", column=@Column(name="HOME_STATE"))
						})
						protected Set<Address> vacationHomes = new HashSet();
						...
				}
 
	- Since:	Java Persistence 2.0

	- See Also:
			@ElementCollection
			@AttributeOverride
			@AssociationOverride
			@Column


-------------------------
30. @ColumnResult
-------------------------

	- Refs: https://chat.openai.com/share/a7db412a-d0bf-4697-86a9-8ca2a3d3fa64

	- 


-------------------------
31. @ConstructorResult
-------------------------

	- Refs: https://chat.openai.com/share/11aee54d-cfd5-4996-a7fe-465ca374e679

	- 


-------------------------
32. @Convert
-------------------------

	- Refs: https://chat.openai.com/share/01c94f9c-908d-4bdb-9cf7-43b618df2f71

	- 


-------------------------
33. @Converter
-------------------------

	- Refs: https://chat.openai.com/share/a5299b5b-948f-4091-8047-5bde31bf121b

	- 


-------------------------
34. @Converts
-------------------------

	- Refs: https://chat.openai.com/share/933fd2b9-bb75-49ea-8cc4-8c2e20307521

	- 


-------------------------
35. @DiscriminatorColumn
-------------------------

	- Refs: https://chat.openai.com/share/68c3dbee-82a4-4ad6-9038-e5899c713e10

	- Specifies the discriminator column for the `SINGLE_TABLE` and `JOINED` Inheritance mapping strategies. 
	- The strategy and the discriminator column are ONLY specified in the root of an entity class hierarchy or sub hierarchy in which a different inheritance strategy is applied.
	- If the `@DiscriminatorColumn` annotation is missing, and a discriminator column is required, the name of the discriminator column defaults to "DTYPE" 
		and the discriminator type to `DiscriminatorType.STRING`. 
    
   - Example:

		     @Entity
		     @Table(name="CUST")
		     @Inheritance(strategy=SINGLE_TABLE)
		     @DiscriminatorColumn(name="DISC", discriminatorType=STRING, length=20)
		     public class Customer { ... }

		     @Entity
		     public class ValuedCustomer extends Customer { ... }
 
	- Since:	Java Persistence 1.0

	- See Also:
				@DiscriminatorValue


-------------------------
36. @DiscriminatorValue
-------------------------

	- Refs: https://chat.openai.com/share/e78164a4-2681-407b-b815-f862d4c0fd4c

	- Specifies the value of the discriminator column for entities of the given type. 	(***)
	- The `@DiscriminatorValue` annotation can ONLY be specified on a `concrete entity class`. 	(***)

	- If the `@DiscriminatorValue` annotation is NOT specified and a discriminator column is used, 
		a provider-specific function will be used to generate a value representing the entity type. 

	- If the `DiscriminatorType` is `STRING`, the `discriminator value default` is the `entity name`. 		<--- (***)

	- The inheritance strategy and the discriminator column are ONLY specified
		in the `root of an entity class hierarchy` or `sub hierarchy` in which a different inheritance strategy is applied.	(***)

	- The discriminator value, if NOT defaulted, should be specified for each entity class in the hierarchy. 	(***)

	- Example:

		    @Entity
		    @Table(name="CUST")
		    @Inheritance(strategy=SINGLE_TABLE)
		    @DiscriminatorColumn(name="DISC", discriminatorType=STRING, length=20)
		    @DiscriminatorValue("CUSTOMER")
		    public class Customer { ... }

		    @Entity
		    @DiscriminatorValue("VCUSTOMER")
		    public class ValuedCustomer extends Customer { ... }
 
	- Since:	Java Persistence 1.0

	- See Also:
				@DiscriminatorColumn


-------------------------
37. @ElementCollection
-------------------------

	- Refs: https://chat.openai.com/share/2cf5fb2a-19dd-49f7-b700-6a8f21806e1f

	- Specifies a collection of instances of a basic type or embeddable class.
	- Must be specified if the collection is to be mapped by means of a collection table. 
   
   - Example:

			@Entity public class Person {
					@Id protected String ssn;
					protected String name;
					...
					@ElementCollection  
					protected Set<String> nickNames = new HashSet();
					...
			} 
  
	- Since:	Java Persistence 2.0


-------------------------
38. @Embeddable
-------------------------

	- Refs: https://chat.openai.com/share/f75c6e23-05ff-4562-9eb9-2427d4c82735

	- Specifies a class whose instances are stored as an intrinsic part of an owning entity and share the identity of the entity.
	- Each of the persistent properties or fields of the embedded object is mapped to the database table for the entity. 
	- Note that the `@Transient` annotation may be used to designate the non-persistent state of an embeddable class. 

	- Example 1:

			@Embeddable public class EmploymentPeriod { 
					@Temporal(DATE) java.util.Date startDate;
					@Temporal(DATE) java.util.Date endDate;
					... 
			}

	- Example 2:

			@Embeddable public class PhoneNumber {
					protected String areaCode;
					protected String localNumber;
					@ManyToOne PhoneServiceProvider provider;
					...
			}

			@Entity public class PhoneServiceProvider {
					@Id protected String name;
					...
			}

	- Example 3:

			@Embeddable public class Address {
					protected String street;
					protected String city;
					protected String state;
					@Embedded protected Zipcode zipcode;
			}

			@Embeddable public class Zipcode {
					protected String zip;
					protected String plusFour;
			}

	- Since:	Java Persistence 1.0


-------------------------
39. @Embedded
-------------------------

	- Refs: https://chat.openai.com/share/4fcc7f58-5c4d-43aa-9959-33b7641f75a6

	- Specifies a persistent field or property of an entity whose value is an instance of an embeddable class.
	- The embeddable class must be annotated as `@Embeddable`. 
	- The `@AttributeOverride`, `@AttributeOverrides`, `@AssociationOverride`, and `@AssociationOverrides` annotations may be used to 
		override mappings declared or defaulted by the embeddable class. 

	- Example:

			@Embedded
			@AttributeOverrides({
					@AttributeOverride(name="startDate", column=@Column("EMP_START")),
					@AttributeOverride(name="endDate", column=@Column("EMP_END"))
			})
			public EmploymentPeriod getEmploymentPeriod() { ... }


-------------------------
40. @EmbeddedId
-------------------------

	- Refs: https://chat.openai.com/share/1c89fa19-c0e4-4d9a-a78f-dc494e715c92

	- Applied to a persistent field or property of an entity class or mapped superclass to denote a `composite primary key` that is an `embeddable` class.
	- The `embeddable` class must be annotated as `@Embeddable`. 
	- There must be only one `@EmbeddedId` annotation and no `@Id` annotation when the `@EmbeddedId` annotation is used. 
	- The `@AttributeOverride` annotation may be used to override the column mappings declared within the embeddable class. 
	- The `@MapsId` annotation may be used in conjunction with the `@EmbeddedId` annotation to specify a derived primary key. 
	- If the entity has a derived primary key, the `@AttributeOverride` annotation may only be used to override those attributes of the embedded id 
		that do NOT correspond to the relationship to the parent entity. 
	- Relationship mappings defined within an embedded id class are NOT supported. 

   - Example 1:

				@EmbeddedId
				protected EmployeePK empPK;

	- Example 2:

				@Embeddable
				public class DependentId {
						String name;
						EmployeeId empPK;   // corresponds to primary key type of Employee
				}

				@Entity
				public class Dependent {
						// default column name for "name" attribute is overridden
						@AttributeOverride(name="name", @Column(name="dep_name"))
						@EmbeddedId DependentId id;
						...
						@MapsId("empPK")
						@ManyToOne Employee emp;
				}
 
	- Since:	Java Persistence 1.0

	- See Also:
			@Embeddable
			@MapsId


-------------------------
41. @EntityListeners
-------------------------

	- Refs: https://chat.openai.com/share/de699393-ca75-4015-8312-d434a0edc4ea

	- Specifies the callback listener classes to be used for an entity or mapped superclass.
	- This annotation may be applied to an entity class or mapped superclass.

	- Since:	Java Persistence 1.0


-------------------------
42. @EntityResult
-------------------------

	- Refs: https://chat.openai.com/share/7ddc7a6a-0f37-4bbb-b601-8a24a89766f9

	- Used in conjunction with the `@SqlResultSetMapping` annotation to map the SELECT clause of a SQL query to an entity result. 
	- If this annotation is used, the SQL statement should select all of the columns that are mapped to the entity object.
	- This should include foreign key columns to related entities.
	- The results obtained when insufficient data is available are undefined. 
   
   - Example:

			Query q = em.createNativeQuery(
					"SELECT o.id, o.quantity, o.item, i.id, i.name, i.description "+
					"FROM Order o, Item i " +
					"WHERE (o.quantity > 25) AND (o.item = i.id)",
					"OrderItemResults"
			);

			@SqlResultSetMapping(name="OrderItemResults", 
					entities={
							@EntityResult(entityClass=com.acme.Order.class),
							@EntityResult(entityClass=com.acme.Item.class)
					})
 
	- Since:	Java Persistence 1.0

	- See Also:
				@SqlResultSetMapping


-------------------------
43. @Enumerated
-------------------------

	- Refs: https://chat.openai.com/share/6b62d127-e5ad-492d-b227-401c1e63be21

	- Specifies that a persistent property or field should be persisted as a enumerated type.

	- The `@Enumerated` annotation may be used in conjunction with the `@Basic` annotation, or inconjunction with the `@ElementCollection` annotation
		when the element collection value is of basic type.

	- If the enumerated type is NOT specified or the `@Enumerated` annotation is NOT used, the `EnumType` value is assumed to be `ORDINAL`. 
   
   - Example:

				public enum EmployeeStatus { FULL_TIME, PART_TIME, CONTRACT }
				public enum SalaryRate { JUNIOR, SENIOR, MANAGER, EXECUTIVE }

				@Entity
				public class Employee {
					public EmployeeStatus getStatus() {...}
					...
					@Enumerated(STRING)
					public SalaryRate getPayScale() {...}
					...
				}
 
	- Since:	Java Persistence 1.0

	- See Also:
				@Basic
				@ElementCollection


-------------------------
44. @ExcludeDefaultListeners
-------------------------

	- Refs: https://chat.openai.com/share/72d88ab2-ca1d-4653-bc42-be7af358cb36

	- 


-------------------------
45. @ExcludeSuperclassListeners
-------------------------

	- Refs: https://chat.openai.com/share/798c3f47-ad5e-4ca6-a7d0-d7fc74b34f05

	- 


-------------------------
46. @StaticMetamodel
-------------------------

	- Refs: https://chat.openai.com/share/3f35136a-c3fc-4c90-b197-2422781883a6

	- 


-------------------------
47. @FieldResult
-------------------------

	- Refs: https://chat.openai.com/share/660d2644-eef4-4cad-8464-9b8190356c42

	- 


-------------------------
48. @ForeignKey
-------------------------

	- Refs: https://chat.openai.com/share/67f91278-4851-4cb8-b461-81bf3d8aa760

	- Used to specify the handling of foreign key constraints when schema generation is in effect.

	- If this annotation is NOT specified, the persistence provider's default foreign key strategy will be used. 
	- The `ConstraintMode` value is used to specify whether foreign key constraints should be generated. 

	- The syntax used in the `foreignKeyDefinition` element should follow the SQL syntax used by the target database for foreignkey constraints.

	- For example, this may be similar the following: 

				FOREIGN KEY ( <COLUMN expression> {, <COLUMN expression>}... )
				REFERENCES <TABLE identifier> [ (<COLUMN expression> {, <COLUMN expression>}... ) ]

				[ ON UPDATE <referential action> ]
				[ ON DELETE <referential action> ]
 
	- When the `ConstraintMode` value is `CONSTRAINT`, but the `foreignKeyDefinition` element is NOT specified, 
		the provider will generate foreign key constraints whose update and delete actions it determines most appropriate
		for the join column(s) to which the `@ForeignKey` annotation is applied.

	- Since:	Java Persistence 2.1

	- See Also:

			@JoinColumn
			@JoinColumns
			@MapKeyJoinColumn
			@MapKeyJoinColumns
			@PrimaryKeyJoinColumn
			@JoinTable
			@CollectionTable
			@SecondaryTable
			@AssociationOverride


-------------------------
49. @IdClass
-------------------------

	- Refs: https://chat.openai.com/share/9d884591-7bc0-41a2-9a20-a2fd88303fbc

	- Specifies a composite primary key class that is mapped to multiple fields or properties of the entity. 
	
	- The `names` of the fields or properties in the `primary key class` 
		and the primary key fields or properties of the `entity` must correspond and their `types` must be the `same`. 

   - Example:

		   @IdClass(com.acme.EmployeePK.class)
		   @Entity
		   public class Employee {
			      @Id String empName;
			      @Id Date birthDay;
			      ...
		   }
 
	- Since:	Java Persistence 1.0


-------------------------
50. @Inheritance
-------------------------

	- Refs: https://chat.openai.com/share/c748a606-9a7e-4254-a052-903c61626540

	- Specifies the inheritance strategy to be used for an entity class hierarchy.
	- It is specified on the entity class that is the root of the entity class hierarchy.

	- If the `@Inheritance` annotation is NOT specified or if NO inheritance type is specified for an entity class hierarchy, 
		the `SINGLE_TABLE` mapping strategy is used. 	(***)

   - Example:

		   @Entity
		   @Inheritance(strategy=JOINED)
		   public class Customer { ... }

		   @Entity
		   public class ValuedCustomer extends Customer { ... }
 
	- Since:	Java Persistence 1.0


-------------------------
51. @JoinColumns
-------------------------

	- Refs: https://chat.openai.com/share/979fa8a2-d311-4d3d-86e9-dce6e90d857c

	- Specifies the mapping for `composite` foreign keys.
	- This annotation groups `@JoinColumn` annotations for the same relationship. 
	
	- When the `@JoinColumns` annotation is used,
		both the `name` and the `referencedColumnName` elements must be specified in each such `@JoinColumn` annotation. 	<--- ***

	- Example:

			@ManyToOne
			@JoinColumns({
					@JoinColumn(name="ADDR_ID", referencedColumnName="ID"),
					@JoinColumn(name="ADDR_ZIP", referencedColumnName="ZIP")
			})
			public Address getAddress() { return address; }

	- Since:	Java Persistence 1.0

	- See Also:
			@JoinColumn
			@ForeignKey


-------------------------
52. @JoinTable
-------------------------

	- Refs: https://chat.openai.com/share/b696f2ab-5660-43c4-950b-7c069014a279

	- Specifies the mapping of associations.
	- It is applied to the `owning side` of an association. 	(***)
	- A `join table` is typically used in the mapping of `many-to-many` and `unidirectional one-to-many` associations.	(***)
	- It may also be used to map :
			(1) Bi-directional many-to-one (N : 1) / one-to-many (1 : N) associations
			(2) Uni-directional many-to-one (N : 1) relationships
			(3) one-to-one (1 : 1) associations (both `Bi-directional` and `Uni-directional`)
	- When a join table is used in mapping a relationship with an `embeddable` class on the `owning side` of the relationship, 
		the containing entity rather than the embeddable class is considered the owner of the relationship. 
	- If the `@JoinTable` annotation is missing, the default values of the annotation elements apply.
	- The name of the join table is assumed to be the table names of the associated primary tables concatenated together (owning sidefirst) using an underscore. 

   - Example:

		    @JoinTable(
		        name="CUST_PHONE",
		        joinColumns= @JoinColumn(name="CUST_ID", referencedColumnName="ID"),
		        inverseJoinColumns= @JoinColumn(name="PHONE_ID", referencedColumnName="ID")
		    )
 
	- Since:	Java Persistence 1.0

	- See Also:
			@JoinColumn
			@JoinColumns


-------------------------
53. @ManyToMany
-------------------------

	- Refs: https://chat.openai.com/share/522db147-05b2-4a93-a563-91353a9aae39

	- Specifies a many-valued association with many-to-many multiplicity. 
	- Every many-to-many association has two sides, the owning side and the non-owning, or inverse, side.
	- The join table is specified on the owning side.
	- If the association is bidirectional, eitherside may be designated as the owning side.
	- If the relationship isbidirectional, the non-owning side must use the mappedBy element of the `@ManyToMany` annotation
		to specify the relationship field or property of the owning side. 
	- The join table for the relationship, if NOT defaulted, is specified on the owning side. 
	- The `@ManyToMany` annotation may be used within an embeddable class contained within an entity class to specify a relationship to a collection of entities.
	- If the relationship isbidirectional and the entity containing the embeddable class is the owner of the relationship, 
		the non-owning side must use the mappedBy element of the `@ManyToMany` annotation to specify the relationship field or property of the embeddable class.
	- The dot (".") notation syntax must be used in the mappedBy element to indicate the relationship attribute within the embedded attribute.
	- The value of each identifier used with the dot notation is the name of the respective embedded field or property. 

   - Example 1:

			// In Customer class:

			@ManyToMany
			@JoinTable(name="CUST_PHONES")
			public Set<PhoneNumber> getPhones() { return phones; }

			// In PhoneNumber class:

			@ManyToMany(mappedBy="phones")
			public Set<Customer> getCustomers() { return customers; }

 	- Example 2:

			// In Customer class:

			@ManyToMany(targetEntity=com.acme.PhoneNumber.class)
			public Set getPhones() { return phones; }

			// In PhoneNumber class:

			@ManyToMany(targetEntity=com.acme.Customer.class, mappedBy="phones")
			public Set getCustomers() { return customers; }

 	- Example 3:

			// In Customer class:

			@ManyToMany
			@JoinTable(
					name="CUST_PHONE", 
					joinColumns= @JoinColumn(name="CUST_ID", referencedColumnName="ID"),
			  		inverseJoinColumns= @JoinColumn(name="PHONE_ID", referencedColumnName="ID")
		  	)
			public Set<PhoneNumber> getPhones() { return phones; }

			// In PhoneNumberClass:

			@ManyToMany(mappedBy="phones")
			public Set<Customer> getCustomers() { return customers; }
 
	- Since:	Java Persistence 1.0
	- See Also: @JoinTable


-------------------------
54. @MapKey
-------------------------

	- Refs: https://chat.openai.com/share/43c34d7b-70c2-48ac-8814-1ff953582271

	- 


-------------------------
55. @MapKeyClass
-------------------------

	- Refs: https://chat.openai.com/share/78045256-28cb-4438-81df-7f1f019743e2

	- 


-------------------------
56. @MapKeyColumn
-------------------------

	- Refs: https://chat.openai.com/share/d45922a2-d048-486c-8fff-f815b1de3078

	- 


-------------------------
57. @MapKeyEnumerated
-------------------------

	- Refs: https://chat.openai.com/share/2ea864c4-348f-44f3-87ab-6862601f995d

	- 


-------------------------
58. @MapKeyJoinColumn
-------------------------

	- Refs: https://chat.openai.com/share/d03c1e91-12a0-4774-9959-333fba07ecdd

	- 


-------------------------
59. @MapKeyJoinColumns
-------------------------

	- Refs: https://chat.openai.com/share/9dcf1f8f-3300-44da-b552-127fe5acdeaa

	- 


-------------------------
60. @MapKeyTemporal
-------------------------

	- Refs: https://chat.openai.com/share/5eb3cc2e-41ec-412c-bfe0-13ce165b8194

	- 


-------------------------
61. @MapsId
-------------------------

	- Refs: https://chat.openai.com/share/3ee469b6-fc6f-414e-b716-cd14fc1f62ef

	- Designates a `ManyToOne` or `OneToOne` relationship attribute that provides them applying for an `EmbeddedId` primary key, 
		an attribute within an `EmbeddedId` primary key, or a simple primary key of the parent entity.
	- The value element specifies the attribute within a composite key to which the relationship attribute corresponds.
	- If the entity's primary key is of the same Java type as the primary key of the entity referenced by the relationship, the value attribute is NOT specified. 
 
 	- Example:

			// parent entity has simple primary key

			@Entity
			public class Employee {
					@Id long empId;
					String name;
					...
			} 

			// dependent entity uses EmbeddedId for composite key

			@Embeddable
			public class DependentId {
					String name;
					long empid;   // corresponds to primary key type of Employee
			}

			@Entity
			public class Dependent {
					@EmbeddedId DependentId id;
					...
					@MapsId("empid")  //  maps the empid attribute of embedded id
					@ManyToOne Employee emp;
			}
 
	- Since:	Java Persistence 2.0


-------------------------
62. @NamedAttributeNode
-------------------------

	- Refs: https://chat.openai.com/share/162252ea-ab93-476f-8bdf-d2c37ffdbab9

	- 


-------------------------
63. @NamedEntityGraph
-------------------------

	- Refs: https://chat.openai.com/share/75ff0aec-4a7f-4041-8dee-3b547cb317ef

	- 


-------------------------
64. @NamedEntityGraphs
-------------------------

	- Refs: https://chat.openai.com/share/9ec1ec56-99a8-4d8d-8303-14503621043d

	- 


-------------------------
65. @NamedNativeQueries
-------------------------

	- Refs: https://chat.openai.com/share/e5ab0264-44b5-4bfc-99f1-46b85c995732

	- 


-------------------------
66. @NamedNativeQuery
-------------------------

	- Refs: https://chat.openai.com/share/96eff528-2faa-41ca-b6db-4a086966b7dd

	- 


-------------------------
67. @NamedQueries
-------------------------

	- Refs: https://chat.openai.com/share/fd7ab287-0f42-45de-a44c-3ea430449577

	- Specifies multiple named Java Persistence query language queries.
	- Query names are scoped to the persistence unit.
	- The `@NamedQueries` annotation can be applied to an entity or mapped superclass.

	- Since:	Java Persistence 1.0

	- See Also:
			@NamedQuery


-------------------------
68. @NamedQuery
-------------------------

	- Refs: https://chat.openai.com/share/759a5cab-3329-4d5d-a1a7-aa2902ee135c

	- Specifies a static, named query in the Java Persistence query language.
	- Query names are scoped to the persistence unit.
	- The `@NamedQuery` annotation can be applied to an entity or mapped superclass. 

	- The following is an example of the definition of a named query in the Java Persistence query language: 

			@NamedQuery(
			      name="findAllCustomersWithName",
			      query="SELECT c FROM Customer c WHERE c.name LIKE :custName"
			)
 
 	- The following is an example of the use of a named query: 

			@PersistenceContext
			public EntityManager em;
			...
			customers = em.createNamedQuery("findAllCustomersWithName").setParameter("custName", "Smith").getResultList();
 
	- Since:	Java Persistence 1.0


-------------------------
69. @NamedStoredProcedureQueries
-------------------------

	- Refs: https://chat.openai.com/share/38fbb69c-cea5-4951-985d-c0b27e6c76d2

	- 


-------------------------
70. @NamedStoredProcedureQuery
-------------------------

	- Refs: https://chat.openai.com/share/dd13d3a4-bf5e-4196-b549-9e0ea09c2bb0

	- 


-------------------------
71. @NamedSubgraph
-------------------------

	- Refs: https://chat.openai.com/share/f413d8d9-2e46-402c-b1e5-2d28ebe3293f

	- 


-------------------------
72. @OneToMany
-------------------------

	- Refs: https://chat.openai.com/share/28410b28-a0cf-4f06-bb87-01d1bfae457c

	- Specifies a many-valued association with `one-to-many` multiplicity. 

	- If the collection is defined using generics to specify the element type, 
		the associated target entity type need NOT be specified, 	otherwise the target entity class must be specified.

	- If the relationship is `bi-directional`, the  `mappedBy` element must be used to specify 
		the relationship field or property of the entity that is the owner of the relationship. 	(***)

	- The `@OneToMany` annotation may be used within an `embeddable` class contained within an entity class to specify a relationship to a collection of entities.
	- When the collection is a `java.util.Map`, the `cascade` element and the `orphanRemoval` element apply to the map value. 

   - Example 1: `One-to-Many`  ( 1 : N) association using generics

		    (1) In `Customer` class

		    @OneToMany(cascade=ALL, mappedBy="customer")
		    public Set<Order> getOrders() { return orders; }

		    (2) In `Order` class

		    @ManyToOne
		    @JoinColumn(name="CUST_ID", nullable=false)
		    public Customer getCustomer() { return customer; }

 	- Example 2: `One-to-Many`  ( 1 : N) association without using generics

		    (1) In `Customer` class

			@OneToMany(targetEntity=com.acme.Order.class, cascade=ALL, mappedBy="customer")
			public Set getOrders() { return orders; }

		    (2) In `Order` class

			@ManyToOne
			@JoinColumn(name="CUST_ID", nullable=false)
			public Customer getCustomer() { return customer; }

   - Example 3: `Uni-directional One-to-Many` association using a foreign key mapping

		    (1) In `Customer` class

			@OneToMany(orphanRemoval=true)
			@JoinColumn(name="CUST_ID") 								// join column is in table for Order
			public Set<Order> getOrders() {return orders;}
    
    - Since:	Java Persistence 1.0


-------------------------
73. @OneToOne
-------------------------

	- Refs: https://chat.openai.com/share/44f6083b-6b58-43f3-8e74-3287fa21b187

	- Specifies a single-valued association to another entity that has one-to-one multiplicity.

	- It is NOT normally necessary to specify the associated target entity explicitly
		since it can usually be inferred from the type of the object being referenced.

	- If the relationship is `bi-directional`, 
		the `non-owning side` must use the `mappedBy` element of the `@OneToOne` annotation to specify the relationship `field or property` of the `owning side`. 

	- The `@OneToOne` annotation may be used within an `embeddable` class to specify a relationship from the `embeddable` class to an `entity` class.
	- If the relationship is `bi-directional` and the entity containing the `embeddable` class is on the `owning side` of the relationship, 
		the `non-owning side` must use the `mappedBy` element of the `@OneToOne` annotation to specify the relationship `field or property` of the `embeddable` class.

	- The dot (".") notation syntax must be used in the `mappedBy` element to indicate the relationship attribute within the `embedded` attribute.
	- The value of each identifier used with the dot notation is the name of the respective embedded field or property. 
   
   - Example 1: `One-to-one` association that maps a `foreign key column`

		    // On Customer class:	Source

		    @OneToOne(optional=false)
		    @JoinColumn(name="CUSTREC_ID", unique=true, nullable=false, updatable=false)
		    public CustomerRecord getCustomerRecord() { return customerRecord; }

		    // On CustomerRecord class:	Target

		    @OneToOne(optional=false, mappedBy="customerRecord")
		    public Customer getCustomer() { return customer; }

   - Example 2: One-to-one association that assumes both the source and target `share the same primary key values`. 

		    // On Employee class:	Source

		    @Entity
		    public class Employee {
					@Id Integer id;

					@OneToOne @MapsId
					EmployeeInfo info;
					...
		    }

		    // On EmployeeInfo class:	Target

		    @Entity
		    public class EmployeeInfo {
	    			@Id Integer id;
		    		...
		    }

   - Example 3: One-to-one association from an embeddable class to another entity.

		    @Entity
		    public class Employee {
			       @Id int id;
			       @Embedded LocationDetails location;
			       ...
		    }

		    @Embeddable
		    public class LocationDetails {
			       int officeNumber;
			       @OneToOne ParkingSpot parkingSpot;
			       ...
		    }

		    @Entity
		    public class ParkingSpot {
			       @Id int id;
			       String garage;
			       @OneToOne(mappedBy="location.parkingSpot") Employee assignedTo;
			        ... 
		    } 

	- Since:	Java Persistence 1.0


-------------------------
74. @PersistenceContext
-------------------------

	- Refs: https://chat.openai.com/share/20cdaec9-18b4-48ab-890a-1355d35183fc

	- Expresses a dependency on a container-managed `EntityManager` and its associated `persistence context`.

	- Since:	Java Persistence 1.0


-------------------------
75. @PersistenceContexts
-------------------------

	- Refs: https://chat.openai.com/share/7df74220-c282-4815-96ab-14205515d469

	- Declares one or more `@PersistenceContext` annotations.
	- It is used to express a dependency on container-managed entity manager persistence contexts.

	- Since:	Java Persistence 1.0

	- See Also:	PersistenceContext


-------------------------
76. @PersistenceProperty
-------------------------

	- Refs: https://chat.openai.com/share/5bc338d6-d11d-49c5-88c7-30dcd1a9a4c0

	- Describes a single container or persistence provider property. 
	- Used in `@PersistenceContext`. 
	- Vendor specific properties may be included in the set of properties, and are passed to the persistence provider by the container when the entity manager is created. 
	- Properties that are NOT recognized by a vendor will be ignored.

	- Since:	Java Persistence 1.0


-------------------------
77. @PersistenceUnit
-------------------------

	- Refs: https://chat.openai.com/share/0e52c2a6-24a4-4292-869f-a9b4b27bc4aa

	- Expresses a dependency on an `EntityManagerFactory` and its associated `persistence unit`.

	- Since:	Java Persistence 1.0


-------------------------
78. @PersistenceUnits
-------------------------

	- Refs: https://chat.openai.com/share/45112192-5cc5-4dfc-8633-f71e08621500

	- Declares one or more `@PersistenceUnit` annotations.

	- Since:	Java Persistence 1.0


-------------------------
79. @PostLoad
-------------------------

	- Refs: https://chat.openai.com/share/c7140286-fae0-429f-b78f-351298db7fb3

	- Specifies a callback method for the corresponding lifecycle event.
	- This annotation may be applied to methods of an entity class, a mapped superclass, or a callback listener class.

	- Since:	Java Persistence 1.0


-------------------------
80. @PostPersist
-------------------------

	- Refs: https://chat.openai.com/share/db83e361-983b-4f1f-b59f-47db3089fafa

	- Specifies a callback method for the corresponding lifecycle event.
	- This annotation may be applied to methods of an entity class, a mapped superclass, or a callback listener class.
	- Since:	Java Persistence 1.0


-------------------------
81. @PostRemove
-------------------------

	- Refs: https://chat.openai.com/share/4ebf17ab-3551-4ee7-8a26-134fdf5d25c3

	- Specifies a callback method for the corresponding lifecycle event.
	- This annotation may be applied to methods of an entity class, a mapped superclass, or a callbacklistener class.

	- Since:	Java Persistence 1.0


-------------------------
82. @PostUpdate
-------------------------

	- Refs: https://chat.openai.com/share/29ef09d8-e709-4df1-9f7b-3717eeb990df

	- Specifies a callback method for the corresponding lifecycle event.
	- This annotation may be applied to methods of an entity class, a mapped superclass, or a callback listener class.

	- Since:	Java Persistence 1.0


-------------------------
83. @PrePersist
-------------------------

	- Refs: https://chat.openai.com/share/ca263686-ecfb-4dad-bcdf-8a7e3cba67c7

	- Specifies a callback method for the corresponding lifecycle event.
	- This annotation may be applied to methods of an entity class, a mapped superclass, or a callback listener class.

	- Since:	Java Persistence 1.0


-------------------------
84. @PreRemove
-------------------------

	- Refs: https://chat.openai.com/share/005694b4-6828-4c76-9c7d-73927ebde3b9

	- Specifies a callback method for the corresponding lifecycle event.
	- This annotation may be applied to methods of an entity class, a mapped superclass, or a callback listener class.

	- Since:	Java Persistence 1.0


-------------------------
85. @PreUpdate
-------------------------

	- Refs: https://chat.openai.com/share/16b5dfff-4737-4b6d-a830-37e6518a7c7a

	- Specifies a callback method for the corresponding lifecycle event.
	- This annotation may be applied to methods of an entity class, a mapped superclass, or a callback listener class.

	- Since:	Java Persistence 1.0


-------------------------
86. @PrimaryKeyJoinColumn
-------------------------

	- Refs: https://chat.openai.com/share/5bba419e-8fda-43af-9a7b-44a2537e75f8

	- Specifies a primary key column that is used as a foreign key to join to another table. 
	- It is used to join the primary table of an entity subclass in the `JOINED` mapping strategy to the primary table of its superclass; 		<--- ***
	- it is used within a `@SecondaryTable` annotation to join a secondary table to a primary table; 
	- and it may be used in a `OneToOne` mapping in which the primary key of the referencing entity is used as a foreign key to the referenced entity. 
	- If no `@PrimaryKeyJoinColumn` annotation is specified for a subclass in the `JOINED` mapping strategy, 
		the foreign key columns are assumed to have the same names as the primary key columns of the primary table of the superclass. 

	- Example: Customer and ValuedCustomer subclass

				@Entity
				@Table(name="CUST")
				@Inheritance(strategy=JOINED)
				@DiscriminatorValue("CUST")
				public class Customer { ... }

				@Entity
				@Table(name="VCUST")
				@DiscriminatorValue("VCUST")
				@PrimaryKeyJoinColumn(name="CUST_ID")
				public class ValuedCustomer extends Customer { ... }
 
	- Since:	Java Persistence 1.0
	- See Also:
				@SecondaryTable
				@Inheritance
				@OneToOne
				@ForeignKey


-------------------------
87. @PrimaryKeyJoinColumns
-------------------------

	- Refs: https://chat.openai.com/share/c0abdfcd-bdc5-4c82-8513-3165086412ff

	- Groups `@PrimaryKeyJoinColumn` annotations.
	- It is used to map composite foreign keys. 
   
   - Example: ValuedCustomer subclass

		    @Entity
		    @Table(name="VCUST")
		    @DiscriminatorValue("VCUST")
		    @PrimaryKeyJoinColumns({
			        @PrimaryKeyJoinColumn(name="CUST_ID", referencedColumnName="ID"),
			        @PrimaryKeyJoinColumn(name="CUST_TYPE", referencedColumnName="TYPE")
		    })
		    public class ValuedCustomer extends Customer { ... }
		 
	- Since:	Java Persistence 1.0

	- See Also:
				@ForeignKey



-------------------------
88. @QueryHint
-------------------------

	- Refs: https://chat.openai.com/share/ee80bb81-698b-4c1b-9994-f27327ddfa66

	- Used to supply a query property or hint to the `@NamedQuery` or `@NamedNativeQuery` annotation. 
	- Vendor-specific hints that are NOT recognized by a provider are ignored.

	- Since:	Java Persistence 1.0


-------------------------
89. @SecondaryTable
-------------------------

	- Refs: https://chat.openai.com/share/d0023244-0b07-4b79-bd0d-e1691b15b390

	- Specifies a secondary table for the annotated entity class.
	- Specifying one or more secondary tables indicates that the data for the entity class is stored across multiple tables. 
	- If no `@SecondaryTable` annotation is specified, it is assumed that all persistent fields or properties of the entity are mapped to the primary table.
	- If no primary key join columns are specified, the join columns are assumed to reference the primary key columns of the primary table, 
		and have the same names and types as the referenced primary key columns of the primary table. 

   - Example 1: Single secondary table with a single primary key column.

		    @Entity
		    @Table(name="CUSTOMER")
		    @SecondaryTable(name="CUST_DETAIL", 
		        pkJoinColumns=@PrimaryKeyJoinColumn(name="CUST_ID"))
		    public class Customer { ... } 

   - Example 2: Single secondary table with multiple primary key columns.

		    @Entity
		    @Table( name="CUSTOMER" )
		    @SecondaryTable(name="CUST_DETAIL",
		        pkJoinColumns={
		            @PrimaryKeyJoinColumn(name="CUST_ID"),
		            @PrimaryKeyJoinColumn(name="CUST_TYPE")})
		    public class Customer { ... }
 
	- Since:	Java Persistence 1.0


-------------------------
90. @SecondaryTables
-------------------------

	- Refs: https://chat.openai.com/share/536de695-df54-46cd-a683-ed155791f94e

	- Specifies multiple secondary tables for an entity. 

   - Example 1: Multiple secondary tables assuming primary key columns are named the same in all tables.

		    @Entity
		    @Table(name="EMPLOYEE")
		    @SecondaryTables({
		        @SecondaryTable(name="EMP_DETAIL"),
		        @SecondaryTable(name="EMP_HIST")
		    })
		    public class Employee { ... }
		    
   - Example 2: Multiple secondary tables with differently named primary key columns. 

		    @Entity
		    @Table(name="EMPLOYEE")
		    @SecondaryTables({
		        @SecondaryTable(name="EMP_DETAIL", 
		            pkJoinColumns=@PrimaryKeyJoinColumn(name="EMPL_ID")),
		        @SecondaryTable(name="EMP_HIST", 
		            pkJoinColumns=@PrimaryKeyJoinColumn(name="EMPLOYEE_ID"))
		    })
		    public class Employee { ... }
 
	- Since:	Java Persistence 1.0


-------------------------
91. @SequenceGenerators
-------------------------

	- Refs: https://chat.openai.com/share/01de2086-7f45-4211-97a9-2d013d2f133c

	- Used to group `@SequenceGenerator` annotations.

	- Since:	Java Persistence 2.2

	- See Also:	SequenceGenerator


-------------------------
92. @SqlResultSetMapping
-------------------------

	- Refs: https://chat.openai.com/share/c0f1a33d-363a-414f-95b4-d53c0a4ecf83

	- Specifies the mapping of the result of a native SQL query or stored procedure. 
   
   - Example:

			Query q = em.createNativeQuery(
					"SELECT o.id AS order_id, " +
					"o.quantity AS order_quantity, " +
					"o.item AS order_item, " +
					"i.name AS item_name, " +
					"FROM Order o, Item i " +
					"WHERE (order_quantity > 25) AND (order_item = i.id)",
					"OrderResults"
				);
    
			@SqlResultSetMapping(name="OrderResults", 
					entities={ 
							@EntityResult( entityClass=com.acme.Order.class, fields={
									@FieldResult(name="id", column="order_id"),
									@FieldResult(name="quantity", column="order_quantity"), 
									@FieldResult(name="item", column="order_item")
								} ) },
					columns={ @ColumnResult(name="item_name") } )
 
	- Since:	Java Persistence 1.0

	- See Also:
			@Query
			@StoredProcedureQuery
			@NamedNativeQuery
			@NamedStoredProcedureQuery


-------------------------
93. @SqlResultSetMappings
-------------------------

	- Refs: https://chat.openai.com/share/330031d9-c6c0-4186-969d-39e0da0ff753

	- 


-------------------------
94. @StoredProcedureParameter
-------------------------

	- Refs: https://chat.openai.com/share/469fdf63-810f-43c7-ae66-83b09c1a2fb2

	- 


-------------------------
95. @TableGenerators
-------------------------

	- Refs: https://chat.openai.com/share/bed3d40c-63e4-4eff-b0e1-bf339b19b10b

	- Used to group `@TableGenerator` annotations

	- Since:	Java Persistence 2.2

	- See Also:
			@TableGenerator


-------------------------
96. @Transactional
-------------------------

	- Refs: 


-------------------------
97. @
-------------------------

	- Refs: 

	- 


-------------------------
98. @
-------------------------

	- Refs: 

	- 


-------------------------
98. @
-------------------------

	- Refs: 

	- 


