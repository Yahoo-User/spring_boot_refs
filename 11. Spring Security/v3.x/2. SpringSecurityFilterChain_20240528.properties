==========================================================
 & Spring Security Filter Chain in the Spring Boot v3.3.0 ( 2024.05.28 )
==========================================================

-------------------------
01. Security Filter Chain Configuration
-------------------------

	- Total Filters : 14

	- Security filter chain: [
			/*
				Disables encoding URLs using the `HttpServletResponse` to prevent including the session id in URLs which is not considered URL 
				because the session id can be leaked inthings like HTTP access logs.

				Since:	5.7
			  */
		  	(01) DisableEncodeUrlFilter

		  	/*
		  		Provides integration between the SecurityContext and Spring Web's WebAsyncManager 
		  		by using the SecurityContextCallableProcessingInterceptor.beforeConcurrentHandling(org.springframework.web.context.request.NativeWebRequest, Callable) 
		  		to populate the SecurityContext on the Callable.

				See Also:	
						SecurityContextCallableProcessingInterceptor
		  	  */
		  	(02) WebAsyncManagerIntegrationFilter

		  	/*
		  		A jakarta.servlet.Filter that uses the SecurityContextRepository to obtain the SecurityContext and set it on the SecurityContextHolder.
		  		This is similar to SecurityContextPersistenceFilter
		  		except that the SecurityContextRepository.saveContext(SecurityContext, HttpServletRequest, HttpServletResponse) must be explicitly invoked to save the SecurityContext.
		  		This improves theefficiency and provides better flexibility by allowing different authenticationmechanisms to choose individually if authentication should be persisted.

				Since:• 5.7
		  	  */
		  	(03) SecurityContextHolderFilter

		  	/*
		  		Filter implementation to add headers to the current response.
		  		Can be useful to addcertain headers which enable browser protection.
		  		Like X-Frame-Options, X-XSS-Protectionand X-Content-Type-Options.

				Since:	3.2
		  	  */
		  	(04) HeaderWriterFilter

		  	/*
		  		jakarta.servlet.Filter to handle CORS pre-flight requests and intercept CORS simple and actual requests with a CorsProcessor, and to updatethe response, 
		  		e.g. with CORS response headers, based on the policy matchedthrough the provided CorsConfigurationSource.

				This is an alternative to configuring CORS in the Spring MVC Java configand the Spring MVC XML namespace.
				It is useful for applications depending only on spring-web (not on spring-webmvc) or for security constraints that require CORS checks to be performed at jakarta.servlet.Filter level. 
				This filter could be used in conjunction with DelegatingFilterProxyin order to help with its initialization.

				Since:	4.2
				See Also:
						CORS W3C recommendation
						UrlBasedCorsConfigurationSource
		  	  */
		  	(05) CorsFilter

		  	/*
		  		Logs a principal out. 
				Polls a series of LogoutHandlers.
				The handlers should be specified in the order they are required.
				Generally you will want to call logout handlers TokenBasedRememberMeServices and SecurityContextLogoutHandler (in that order). 

				After logout, a redirect will be performed to the URL determined by either the configured LogoutSuccessHandler or the logoutSuccessUrl, 
				depending onwhich constructor was used.
		  	  */
		  	(06) LogoutFilter

		  	/*
		  		Processes an authentication form submission.
		  		Called AuthenticationProcessingFilter prior to Spring Security 3.0. 
				Login forms must present two parameters to this filter: a username and password.
				The default parameter names to use are contained in the static fields SPRING_SECURITY_FORM_USERNAME_KEY and SPRING_SECURITY_FORM_PASSWORD_KEY.
				The parameter names can also be changed bysetting the usernameParameter and passwordParameter properties. 
				This filter by default responds to the URL /login.

				Since:	3.0
		  	  */
		  	(07) UsernamePasswordAuthenticationFilter

		  	/*
		  		For internal use with namespace configuration in the case where a user doesn'tconfigure a login page.
		  		The configuration code will insert this filter in the chain instead.
		  		Will only work if a redirect is used to the login page.

				Since:	2.0
		  	  */
		  	(08) DefaultLoginPageGeneratingFilter

		  	/*
		  		Generates a default log out page.

				Since:	5.1
		  	  */
		  	(09) DefaultLogoutPageGeneratingFilter

		  	/*
		  		Responsible for reconstituting the saved request if one is cached and it matches thecurrent request. 
				It will call getMatchingRequest on the configured RequestCache.
				If the method returns avalue (a wrapper of the saved request), it will pass this to the filter chain's doFilter method.
				If null is returned by the cache, the original request isused and the filter has no effect.

				Since:	3.0
		  	  */
		  	(10) RequestCacheAwareFilter

		  	/*
		  		A Filter which populates the ServletRequest with a requestwrapper which implements the servlet API security methods. 
				SecurityContextHolderAwareRequestWrapper is extended to provide the following additional methods: 
					• HttpServletRequest.authenticate(HttpServletResponse) - Allows the user todetermine if they are authenticated and if not send the user to the login page. 
																												  See setAuthenticationEntryPoint(AuthenticationEntryPoint).
					• HttpServletRequest.login(String, String) - Allows the user to authenticateusing the AuthenticationManager. 
																						  See setAuthenticationManager(AuthenticationManager).
					• HttpServletRequest.logout() - Allows the user to logout using the LogoutHandlers configured in Spring Security. 
																	   See setLogoutHandlers(List).
					• AsyncContext.start(Runnable) - Automatically copy the SecurityContext from the SecurityContextHolder found on the Thread 
																		 that invoked AsyncContext.start(Runnable) to the Thread that processes the Runnable.
		  	  */
		  	(11) SecurityContextHolderAwareRequestFilter

		  	/*
		  		Detects if there is no Authentication object in the SecurityContextHolder, and populates it with one if needed.
		  	  */
		  	(12) AnonymousAuthenticationFilter

		  	/*
		  		Handles any AccessDeniedException and AuthenticationExceptionthrown within the filter chain. 
				This filter is necessary because it provides the bridge between Java exceptions and HTTP responses.
				It is solely concerned with maintaining the user interface.
				This filter does not do any actual security enforcement. 
				If an AuthenticationException is detected, the filter will launch the authenticationEntryPoint.
				This allows common handling of authenticationfailures originating from any subclass of org.springframework.security.access.intercept.AbstractSecurityInterceptor. 
				If an AccessDeniedException is detected, the filter will determine whether ornot the user is an anonymous user.
				If they are an anonymous user, the authenticationEntryPoint will be launched.
				If they are not an anonymoususer, the filter will delegate to the org.springframework.security.web.access.AccessDeniedHandler.
				By default thefilter will use org.springframework.security.web.access.AccessDeniedHandlerImpl. 

				To use this filter, it is necessary to specify the following properties: 
					• authenticationEntryPoint indicates the handler that should commence the authentication process if an AuthenticationException is detected.
					  Note that this may also switch the current protocol from http to https for an SSL login.
					• requestCache determines the strategy used to save a request during the authentication process in order that it may be retrieved and reused once the user has authenticated.
					  The default implementation is HttpSessionRequestCache.
		  	  */
		  	(13) ExceptionTranslationFilter

		  	/*
		  		An authorization filter that restricts access to the URL using AuthorizationManager.

				Since:	5.5
		  	  */
		  	(14) AuthorizationFilter
	   ]
