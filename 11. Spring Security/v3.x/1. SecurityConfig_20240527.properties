==========================================================
 & Security Config in the Spring Boot v3.3.0 ( 2024.05.27 )
==========================================================


-------------------------
01. @EnableWebSecurity
-------------------------

	- Add this annotation to an `@Configuration` class 
	   to have the Spring Security configuration defined in any `WebSecurityConfigurer` or more likely by exposing a `SecurityFilterChain` bean: 
 
 	- Example:

		 @EnableWebSecurity(debug = true / false)
		 @Configuration
		 public class MyWebSecurityConfiguration {
		
				// ***Warning: You are asking Spring Security to ignore Mvc [pattern='/error']. 
				// 					 This is *Not recommended -- please use "permitAll" via "HttpSecurity#authorizeHttpRequests" instead.

				@Bean
				public WebSecurityCustomizer webSecurityCustomizer() {												// Correct (***)
						# WebSecurityCustomizer (I)  => void customize(WebSecurity web);

						# Spring Security should completely ignore URLs starting with /resources/
						return (web) -> web.ignoring().requestMatchers("/resources/**");
						
						return web -> {};																																		// 1. Forbidden Any Request.
						return web -> web.debug(true);																												// 2. Forbidden Any Request With Debugging Mode.
						return web -> web.ignoring().anyRequest();																							// 3. Allowed Any Request.
						return web -> web.ignoring().requestMatchers("/", "/hello", "/*.jpg", "/imgs/**");							// 4. Allowed Only Matched URIs.
						return web -> web.ignoring().requestMatchers(HttpMethod.POST).and()												// 5. In conjunction with `and()`.
													 .ignoring().requestMatchers("/index.html", "/hello", "/*.jpg", "/imgs/**");			//     Ignoring HTTP POST and Specified URIs.
						return web -> web.ignoring().requestMatchers("/error", "/api/mappings")										// 6. Ignoring Essential URIs.
				} // webSecurityCustomizer
		
			 	@Bean
			 	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {		// Incorrect 	(***)
				 		http.authorizeHttpRequests()																						// Deprecated (***)	
				 				.requestMatchers("/public/**")
				 				.permitAll()
				 				.anyRequest()
				 				.hasRole("USER")
				 				.and()

				 				# Possibly more configuration ...
				 				.formLogin(Customizer.withDefaults()) // enable form based log in

				 				# Set permitAll for all URLs associated with Form Login
				 				.permitAll();
				 				
				 		return http.build();
			 	} // securityFilterChain
		
			 	@Bean
			 	public UserDetailsService userDetailsService() {		// Incorrect 	(***)
				 		UserDetails user = 
				 				User.withDefaultPasswordEncoder()			// Deprecated (***)
							 			.username("user")
							 			.password("password")
							 			.roles("USER")
							 			.build();
				 			
				 		UserDetails admin = 
				 				User.withDefaultPasswordEncoder()			// Deprecated (***)
							 			.username("admin")
							 			.password("password")
							 			.roles("ADMIN", "USER")
							 			.build();
				 			
			 			return new InMemoryUserDetailsManager(user, admin);
			 	} // userDetailsService
		
		 		# Possibly more bean methods ...

		 } // end class
 
	- Since:	3.2

	- See Also:
			WebSecurityConfigurer


-------------------------
02. WebSecurityCustomizer
-------------------------

	- Functional Interface:		

		void customize(WebSecurity web);

	- Performs the customizations on `WebSecurity`.
	- Parameters:	web - the instance of `WebSecurity` to apply to customizations to

	- Callback interface for customizing `WebSecurity`.
	- Beans of this type will automatically be used by `WebSecurityConfiguration` to customize `WebSecurity`.
	 
	 - Example usage:

	 		/**
		 			@FunctionalInterface
		 			public interface WebSecurityCustomizer {
		 				void customize(WebSecurity web);
		 			}
	 		  */
	 
			 @Bean
			 public WebSecurityCustomizer ignoringCustomizer() {																					// Correct (***)
			 		# return (web) -> web.ignoring().requestMatchers("/ignore1", "/ignore2");

					# Spring Security should completely ignore URLs starting with /resources/
					return (web) -> web.ignoring().requestMatchers("/resources/**");
						
					return web -> {};																																		// 1. Forbidden Any Request.
					return web -> web.debug(true);																												// 2. Forbidden Any Request With Debugging Mode.
					return web -> web.ignoring().anyRequest();																							// 3. Allowed Any Request.
					return web -> web.ignoring().requestMatchers("/", "/hello", "/*.jpg", "/imgs/**");							// 4. Allowed Only Matched URIs.
					return web -> web.ignoring().requestMatchers(HttpMethod.POST).and()												// 5. In conjunction with `and()`.
												 .ignoring().requestMatchers("/index.html", "/hello", "/*.jpg", "/imgs/**");
			 } // ignoringCustomizer


-------------------------
03. Example Configurations
-------------------------

	- The most basic example is to configure all URLs to require the role "ROLE_USER".
	- The configuration below requires authentication to every URL and will grant access to both the user "admin" and "user".  

			@Configuration
			@EnableWebSecurity
			public class AuthorizeUrlsSecurityConfig {
	
				 	@Bean
				 	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {							// Correct (***)
					 		http.authorizeHttpRequests((authorizeHttpRequests) ->
					 				authorizeHttpRequests
					 					.requestMatchers("/**").hasRole("USER")
					 			).formLogin(Customizer.withDefaults());
					 			
					 		return http.build();
				 	} // securityFilterChain
				
				 	@Bean
				 	public UserDetailsService userDetailsService() {		// Incorrect 	(***)
					 		UserDetails user = 
					 				User.withDefaultPasswordEncoder()			// Deprecated (***)
								 			.username("user")
								 			.password("password")
								 			.roles("USER")
								 			.build();
					 			
					 		UserDetails admin = 
					 				User.withDefaultPasswordEncoder()			// Deprecated (***)
								 			.username("admin")
								 			.password("password")
								 			.roles("ADMIN", "USER")
								 			.build();
					 			
					 		return new InMemoryUserDetailsManager(user, admin);
				 	} // userDetailsService
			 	
			 } // end class
		 

	- --------------------------------------
	- We can also configure multiple URLs.
	- --------------------------------------
	- The configuration below requires authentication to every URL and will grant access to URLs starting with /admin/ toonly the "admin" user.
	- All other URLs either user can access.  
	
			@Configuration
			@EnableWebSecurity
			public class AuthorizeUrlsSecurityConfig {
			
			 	@Bean
			 	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
				 		http.authorizeHttpRequests((authorizeHttpRequests) ->
				 				authorizeHttpRequests
				 					.requestMatchers("/admin/**").hasRole("ADMIN")
				 					.requestMatchers("/**").hasRole("USER")
				 			).formLogin(Customizer.withDefaults());
				 			
				 		return http.build();
			 	} // securityFilterChain
			 	
			} // end class
		 
	- --------------------------------
	- Note that the matchers are considered in order.
	- --------------------------------

	- Therefore, the following is *invalid because the first matcher matches every request and will never get to the second mapping:  
	 
		 	@Configuration
			@EnableWebSecurity
			public class AuthorizeUrlsSecurityConfig {
			
				 	@Bean
				 	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {		// Correct 	(***)
					 		http.authorizeHttpRequests((authorizeHttpRequests) ->
					 		 		authorizeHttpRequests
					 			 		.requestMatchers("/**").hasRole("USER")
					 			 		.requestMatchers("/admin/**").hasRole("ADMIN")
					 		 	);
					 		 	
					 		return http.build();
				 	} // securityFilterChain
				 	
				 	@Bean
				 	public UserDetailsService userDetailsService() {		// Incorrect	 	(***)
					 		UserDetails user = 
					 				User.withDefaultPasswordEncoder()			// Deprecated (***)
								 			.username("user")
								 			.password("password")
								 			.roles("USER")
								 			.build();
					 			
					 		UserDetails admin = 
					 				User.withDefaultPasswordEncoder()			// Deprecated (***)
								 			.username("admin")
								 			.password("password")
								 			.roles("ADMIN", "USER")
								 			.build();
					 			
					 		return new InMemoryUserDetailsManager(user, admin);
				 	} // userDetailsService
			 	
			 } // end class


-------------------------
04. BCrypt Password Encoder
-------------------------
		
	- Example :

		PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();

		String rawPassword = "...";
		String bcryptedPassword = encoder.encode(rawPassword);

		boolean isMatched = encoder.matches(rawPassword, bcryptedPassword);


-------------------------
05. User.withDefaultPasswordEncoder()		- Deprecated (***)
-------------------------

	- Deprecated. (***)

	- Using this method is not considered safe for production, but is acceptable for demos and getting started.
	- For production purposes, ensure the password is encoded externally.
	- There are no plans to remove this support.	(***)
	- It is deprecated to indicate that this is considered insecure for production purposes.
	- WARNING: This method is considered unsafe for production and is only intended for sample applications.
	- Creates a user and automatically encodes the provided password using `PasswordEncoderFactories.createDelegatingPasswordEncoder()`.

	- For example: (*old - deprecated) 

			@Bean
			UserDetailsService userDetailsService() {			// Incorrect 	(***)

				 UserDetails user = 
				 		User.withDefaultPasswordEncoder()		// Deprecated (***)
							    .username("user")
							    .password("password")
							    .roles("USER")
							    .build();

			} // userDetailsService

			 // outputs {bcrypt}$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG
			 System.out.println(user.getPassword());
  
	- This is not safe for production (it is intended for getting started experience) because the password "password" is compiled into the source code 
	   and then is included in memory at the time of creation.
	- This means there are still ways to recover the plain text password making it unsafe.
	- It does provide a slight improvement to using plain text passwords since the UserDetails password is securely hashed.
	- This means if the UserDetails password is accidentally exposed, the password is securely stored.
	- In a production setting, it is recommended to hash the password ahead of time. 

	- For example: (*new - current)

				@Bean
				UserDetailsService userDetailsService() {		// Correct (***)
			 			PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();
						
						// remember the password that is printed out and use in the next step
						// outputs {bcrypt}$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG
						System.out.println( encoder.encode("password") );
			  
			 			UserDetails user = 
			 					User.withUsername("user")

										// -1st. method - Already encrypted password with BCryptPasswordEncoder
								     	.password("{bcrypt}$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG")		// 1234

								     	// This method is a shortcut for calling authorities(String), but automatically prefixes each entry with"ROLE_".
								     	// This means the following: builder.roles("USER","ADMIN"); is equivalent to builder.authorities("ROLE_USER","ROLE_ADMIN"); 
								     	.roles("USER")
										
										.accountLocked(false)					// Default (false)
										.accountExpired(false)					// Default (false)
										.disabled(false)							// Default (false)
										.credentialsExpired(false)			// Default (false)

								     	.build();

						UserDetails admin = 
								User.withUsername("admin")

										// - 2nd. method - rawPassword and BCryptPasswordEncoder
										.passwordEncoder(PasswordEncoderFactories.createDelegatingPasswordEncoder()::encode)
										.password("5678")

								     	// This means the following is equivalent to `.roles("USER","ADMIN") `
										.authorities("ROLE_USER", "ROLE_ADMIN")

										.build();
				} // userDetailsService
  
	- Returns:	a UserBuilder that automatically encodes the password with the default PasswordEncoder


-------------------------
06. Customizing Login
-------------------------

	- HttpSecurity.formLogin( Customizer.withDefaults() )

	- @Deprecated(since="6.1", forRemoval=true)
	- Deprecated.
	- For removal in 7.0.

	- Use formLogin(Customizer) or formLogin(Customizer.withDefaults()) to stick with defaults.
	- Specifies to support form based authentication.
	- If FormLoginConfigurer.loginPage(String) is not specified a default login page will be generated.

	- Example Configurations :

		The most basic configuration defaults to automatically generating a login page at the URL "/login", 
		redirecting to "/login?error" for authentication failure. 

		The details of the login page can be found on FormLoginConfigurer.loginPage(String) 

 			@EnableWebSecurity
			@Configuration
 			public class FormLoginSecurityConfig {

				 	@Bean
				 	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {		// Incorrect		(***)
					 		http.authorizeRequests()																							// Deprecated (***)
					 			   .requestMatchers("/**")
					 			   .hasRole("USER")
					 			   .and()
					 			   .formLogin();

					 		return http.build();
				 	} // securityFilterChain

				 	@Bean
				 	public UserDetailsService userDetailsService() {		// Incorrect 	(***)
					 		UserDetails user = 
					 				User.withDefaultPasswordEncoder()			// Deprecated (***)
								 			.username("user")
								 			.password("password")
								 			.roles("USER")
								 			.build();

					 		return new InMemoryUserDetailsManager(user);
				 	} // userDetailsService

			 } // end class
 
	- The configuration below demonstrates customizing the defaults.

			@Configuration
 			@EnableWebSecurity
			 public class FormLoginSecurityConfig {

				 	@Bean
				 	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {		// Incorrect		(***)
					 		http.authorizeRequests()																							// Deprecated (***)
					 				.requestMatchers("/**")
					 				.hasRole("USER")
					 				.and()
					 				.formLogin()
					 				.usernameParameter("username") 																	// default is username
					 				.passwordParameter("password") 																		// default is password
					 				.loginPage("/authentication/login") 																	// default is /login with an HTTP get
					 				.failureUrl("/authentication/login?failed") 														// default is /login?error
					 				.loginProcessingUrl("/authentication/login/process"); 									// default is /login
					 																																			// with an HTTP
					 																																			// post
					 		return http.build();
				 	} // securityFilterChain

				 	@Bean
				 	public UserDetailsService userDetailsService() {		// Incorrect 	(***)
					 		UserDetails user = 
					 				User.withDefaultPasswordEncoder()			// Deprecated (***)
								 			.username("user")
								 			.password("password")
								 			.roles("USER")
								 			.build();

					 		return new InMemoryUserDetailsManager(user);
				 	} // userDetailsService

		 	} // end class
			 
	- Returns: the FormLoginConfigurer for further customizations

	- Throws: Exception

	- See Also:
			FormLoginConfigurer.loginPage(String)


-------------------------
07. Customizing Logout
-------------------------

	- Example Custom Configuration :

	- The following customization to log out when the URL "/custom-logout" is invoked.
	- Log out will 
							(1) remove the cookie named "remove", 
							(2) not invalidate the HttpSession, 
							(3) clear the SecurityContextHolder, and 
							(4) upon completion redirect to "/logout-success". 


			 	@EnableWebSecurity
				@Configuration
			 	public class LogoutSecurityConfig {

					 	@Bean
					 	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {	// Correct 	(***)
						 		http
						 			.authorizeRequests(customizer ->
							 				customizer.requestMatchers("/**").hasRole("USER"))
						 			.formLogin(Customizer.withDefaults())

						 			# sample logout customization
						 			.logout( customizer ->
									 				customizer

									 					# Specifies if `SecurityContextLogoutHandler` should clear the `Authentication` at the time of logout.
														# Parameters:	clearAuthentication - true `SecurityContextLogoutHandler` should clear the `Authentication` (default), or false otherwise.
														# Returns:			the `LogoutConfigurer` for further customization
									 					.clearAuthentication(true)

									 					# Allows specifying the names of cookies to be removed on logout success.
									 					# This is a shortcut to easily invoke `addLogoutHandler(LogoutHandler)` with a `CookieClearingLogoutHandler`.
														# Parameters:	cookieNamesToClear - the names of cookies to be removed on logout success.
														# Returns:			the `LogoutConfigurer` for further customization
									 					.deleteCookies("JSESSIONID")

									 					# Configures `SecurityContextLogoutHandler` to invalidate the `HttpSession` at the time of logout.
														# Parameters: 	invalidateHttpSession - true if the HttpSession should be invalidated (default), or false otherwise.
														# Returns:			the `LogoutConfigurer` for further customization
									 					.invalidateHttpSession(true)

									 					# The URL that triggers log out to occur (default is "/logout").
									 					# If CSRF protectionis *enabled (default), then the request must also be a POST. (***)
									 					# This means that by default POST "/logout" is required to trigger a log out.
									 					# If CSRF protection is *disabled, then any HTTP method is allowed.	(***)
														# It is considered best practice to use an HTTP POST on any action that changes state (i.e. log out) to protect against CSRF attacks.
														# If you really want to use an HTTP GET, you can use `logoutRequestMatcher(new AntPathRequestMatcher(logoutUrl, "GET"));`
														# Parameters:	logoutUrl - the URL that will invoke logout.
														# Returns:			the `LogoutConfigurer` for further customization
														# See Also:			logoutRequestMatcher(RequestMatcher)
														# 						HttpSecurity.csrf()
									 					.logoutUrl("/security/logout")

									 					# The URL to redirect to after logout has occurred.
									 					# The default is "/login?logout".
									 					# This is a shortcut for invoking `logoutSuccessHandler(LogoutSuccessHandler)` with a `SimpleUrlLogoutSuccessHandler`.
														# Parameters:	logoutSuccessUrl - the URL to redirect to after logout occurred
														# Returns:			the `LogoutConfigurer` for further customization
									 					.logoutSuccessUrl("/index.html") );

						 		return http.build();
					 	} // securityFilterChain

					 	@Bean
					 	public UserDetailsService userDetailsService() {		// Incorrect 	(***)
						 		UserDetails user = 
						 				User.withDefaultPasswordEncoder()			// Deprecated (***)
									 			.username("user")
									 			.password("password")
									 			.roles("USER")
									 			.build();

						 		return new InMemoryUserDetailsManager(user);
					 	} // userDetailsService

				} // end class
 
	- Parameters:	logoutCustomizer - the Customizer to provide more options for the `LogoutConfigurer`
	- Returns:		the `HttpSecurity` for further customizations


-------------------------
08. Create In-Memory Users
-------------------------

	(*) If the following (1) + (2) used together : 	(2) AuthenticationProvider > (1) UserDetailsService
		- (1) + (2) all called back automatically.
		- "Global AuthenticationManager" configured with an (2) "AuthenticationProvider" bean.			(***)
		- (1) "UserDetailsService" beans will *Not be used(= applied) for username/password login.	(***)
		- Consider removing the (2) "AuthenticationProvider" bean. 														(***)
		- Alternatively, consider using the (1) "UserDetailsService" in a manually instantiated "DaoAuthenticationProvider".		(***)

	(1) Using "UserDetailsService" Bean

				@Bean
				UserDetailsService userDetailsService() {					
					PasswordEncoder bCryptPasswordEncoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();
					
					UserDetails user = 
							User.withUsername("user")
									.passwordEncoder(bCryptPasswordEncoder::encode)
									.password("12345")
									.roles("USER")
									.accountExpired(false)
									.accountLocked(false)
									.credentialsExpired(false)
									.disabled(false)
									.build();
					
					UserDetails admin =
							User.withUsername("admin")
									.passwordEncoder(bCryptPasswordEncoder::encode)
									.password("67890")
									.authorities("ROLE_USER", "ROLE_ADMIN")
									.build();
					
					return new InMemoryUserDetailsManager(user, admin);
				} // userDetailsService


	(2) Using "AuthenticationManagerBuilder" Bean

				@Autowired
				void authenticate(AuthenticationManagerBuilder auth) throws Exception {

					PasswordEncoder bCryptPasswordEncoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();

					// -----------
					// (1) In-Memory Authentication Configuration
					// -----------

					auth.inMemoryAuthentication()
							.passwordEncoder(bCryptPasswordEncoder)
							.withUser("member")
							.password("{bcrypt}$2a$10$Ha4RkwRhqw0O/yIWLccTbeDiFQMp2CV51WwbwauymiJRV9I2yEUO2")	// Bcrypted password : 1234
							//.password("{noop}5678")		// No bcrypted password with {noop} notation
							.roles("USER");

					auth.inMemoryAuthentication()
							.passwordEncoder(bCryptPasswordEncoder)
							.withUser("admin")
							.password("{bcrypt}$2a$10$Ha4RkwRhqw0O/yIWLccTbeDiFQMp2CV51WwbwauymiJRV9I2yEUO2")	// Bcrypted password : 1234
							//.password("{noop}5678")		// No bcrypted password with {noop} notation
							.authorities("ROLE_USER", "ROLE_ADMIN");


					// -----------
					// (2) JDBC Authentication Configuration
					// -----------

					String usersQuery = "";
					String authoritiesQuery = "";
					
					auth.jdbcAuthentication()
							/**
								Populates the DataSource to be used. 
								This is the *Only required attribute.	(***)

									Parameters:		dataSource the DataSource to be used. Cannot be null.	(***)
									Returns:	The `JdbcUserDetailsManagerConfigurer` used for additional customizations
							  */
							.dataSource(this.dataSource)

							/**
								Allows specifying the `PasswordEncoder` to use with the `DaoAuthenticationProvider`.
								The default is to use `plain text`.		(***)

									Parameters:		passwordEncoder - The `PasswordEncoder` to use.
									Returns:			the `AbstractDaoAuthenticationConfigurer` for further customizations
							  */
							.passwordEncoder(bCryptPasswordEncoder)

							/**
								A non-empty string prefix that will be added to role strings loaded from persistent storage (default is "").

									Parameters:		rolePrefix 
									Returns:		The `JdbcUserDetailsManagerConfigurer` used for additionalcustomizations
							  */
							.rolePrefix("ROLE_")

							/**
								Sets the query to be used for finding a user by their username.

								For example: 	"SELECT username, password, enabled FROM users WHERE username = ?"	(***)

									Parameters:		query - The query to use for selecting the username, password, and if the user is enabled by username.
																		 Must contain a single parameter for the username.	(***)
									Returns:	The `JdbcUserDetailsManagerConfigurer` used for additionalcustomizations
							  */
							.usersByUsernameQuery(usersQuery)

							/**
								Sets the query to be used for finding a user's authorities by their username.

								For example: 	"SELECT username, authority FROM authorities WHERE username = ?"		(***)

									Parameters:		query - The query to use for selecting the username, authority by username.
																		Must contain a single parameter for the username.	(***)
									Returns:	The `JdbcUserDetailsManagerConfigurer` used for additionalcustomizations
							  */
							.authoritiesByUsernameQuery(authoritiesQuery);
				} // authenticate


