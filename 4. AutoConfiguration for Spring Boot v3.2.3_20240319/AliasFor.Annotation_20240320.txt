============================================
`@AliasFor` Annotation in Spring Framework
============================================


1. Ref: https://chat.openai.com/share/bd9abd6e-194e-45f1-b5b0-80c8ba9c5257


2. Concept & Purpose

	- Spring Framework 에서 `@AliasFor` 어노테이션은, 
	  "다른 어노테이션의 속성과 동일한 역할을 하는 데 사용" 됩니다.
	  =====================================================

	- 이 `@AliasFor` 어노테이션은, 주로 자바의 `어노테이션 메타 프로그래밍` 기능을 활용하여, 
	  중복코드를 줄이고 유연성을 높이는 데 도움을 줍니다.

	- `@AliasFor` 어노테이션은 스프링 4.2 버전에서 처음 소개되었으며, 
	  주로 "메타-어노테이션과 어노테이션 사이의 속성들 간의 관계를 정의하는 데 사용" 됩니다.
		   =========================================================================
	
	- 이를 통해, 코드를 더 명확하고 간결하게 만들 수 있습니다.


3. Simple Example

	- 예를 들어, 아래의 두 어노테이션이 있다고 가정해 봅시다.

		@Target(ElementType.TYPE)
		@Retention(RetentionPolicy.RUNTIME)

		public @interface MyFirstAnnotation {	// (1) MyFirstAnnotation
		    String value() default "";			// 		`value` attribute
		}	// MyFirstAnnotation

		----------------------------

		@Target(ElementType.TYPE)
		@Retention(RetentionPolicy.RUNTIME)

		public @interface MySecondAnnotation {	// (2) MySecondAnnotation
		    String name() default "";			//		`name` attribute
		}	// MySecondAnnotation

	- 여기서, (1) MyFirstAnnotation의 value 속성과 (2) MySecondAnnotation의 name 속성이
	  "서로 동일한 역할" 을 한다고 가정해 봅시다.
	  ==================

	- 그런 경우 `@AliasFor`를 사용하여 간결하게 표현할 수 있습니다.

		@Target(ElementType.TYPE)
		@Retention(RetentionPolicy.RUNTIME)

		public @interface MySecondAnnotation {	// (2) MySecondAnnotation

		    @AliasFor( annotation = MyFirstAnnotation.class, attribute = "value" )
		    ======================================================================
		    String name() default ""; 			//		`name` attribute

		}	// MySecondAnnotation

	- 위의 예제에서, MySecondAnnotation의 name 속성은, 
	  MyFirstAnnotation의 value 속성과 "동일한 역할을 한다고 선언"했습니다.
	
	- 이렇게 함으로써, 두 어노테이션 사이의 관계를 명시적으로 표현할 수 있습니다.


4. Conclusion

	- `@AliasFor` 어노테이션은, 다음과 같은 중요한 속성을 가집니다.

		(1) annotation: 별칭으로 사용할 "다른 어노테이션 클래스" 를 지정합니다.
		(2) attribute: 	별칭으로 사용할 "다른 어노테이션 속성" 	 을 지정합니다.
		(3) parameter: 	필요에 따라, 별칭이 지정된 어노테이션의 속성에 대한 별칭을 명시합니다. 
						이것은 어노테이션의 "생성자에 대한 별칭을 지정할 때 사용"됩니다.
											-------------------------------------

	- 이러한 속성들을 통해, `@AliasFor` 어노테이션을 사용하여 어노테이션 간의 관계를 유연하게 정의할 수 있습니다.

	- 이는 코드의 가독성과 유지보수성을 향상시키는 데 도움이 됩니다.


5. Comments

	- `@AliasFor`는, 어노테이션 속성에 대한 별칭을 선언하는 데 사용되는 어노테이션입니다.

	- 사용 시나리오

		• 어노테이션 내의 명시적 별칭: "단일" 어노테이션 내에서 @AliasFor는 속성 쌍에 대해 선언되어, 서로 교환가능한 별칭임을 알릴 수 있습니다.

		• 메타-어노테이션의 속성에 대한 명시적 별칭: @AliasFor의 annotation 속성이, 이를 선언한 어노테이션과 다른 어노테이션으로 설정된 경우, 
		  해당 속성은 메타 어노테이션의 속성에 대한 별칭으로 해석됩니다(즉, 명시적 메타-어노테이션 속성 재정의). 

		  이를 통해, 어노테이션 계층 내에서 정확히 어떤 속성이 재정의 되는지 세밀하게 제어할 수 있습니다.
		  실제로 @AliasFor 를 사용하면, 메타-어노테이션의 value 속성에 대한 별칭을 선언하는 것도 가능합니다.

		• 어노테이션 내의 묵시적 별칭: 어노테이션 내의 하나 이상의 속성이 동일한 메타-어노테이션 속성에 대한 속성 재정의로 선언되면
		  (직접 또는 전이적으로), 해당 속성은 서로에 대한 묵시적 별칭 집합으로 처리되어 유사한 동작이 발생합니다.
		  어노테이션 내의 명시적 별칭에 대한 것입니다.

	- 사용 요구사항
		Java의 모든 어노테이션과 마찬가지로 `@AliasFor` 자체의 존재만으로는 별칭 의미 체계를 적용하지 않습니다.
		별칭 의미 체계를 강제적용하려면, `MergedAnnotations`를 통해 어노테이션을 로드해야 합니다.

	- 구현 요구사항

		• 어노테이션 내의 명시적 별칭

			1. 	별칭 쌍을 구성하는 각 속성은 `@AliasFor`로 어노테이션을 달아야 하며, 속성 또는 값은 쌍의 다른 속성을 참조해야 합니다. 
				Spring Framework5.2.1 이후로, 분석된 쌍의 속성 중 하나만 어노테이션을 다는 것이 기술적으로 가능합니다. 
				그러나 더 나은 문서화와 Spring Framework의 이전 버전과의 호환성을 위해 분석된 쌍의 두 속성에 어노테이션을 다는 것이 좋습니다.
			2. 	별칭 속성은 동일한 반환 유형을 선언해야 합니다.
			3. 	별칭 속성은 기본값을 선언해야 합니다.
			4. 	별칭 속성은 동일한 기본값을 선언해야 합니다.
			5. 	annotation을 선언하면 안 됩니다.

		• 메타-어노테이션의 속성에 대한 명시적 별칭

			1. 	메타 어노테이션의 속성에 대한 별칭인 속성은 @AliasFor로 주석을 달아야 하며, 속성은 메타-어노테이션의 속성을 참조해야 합니다.
			2. 	별칭 속성은 동일한 반환 유형을 선언해야 합니다.
			3. 	annotation은 메타-어노테이션을 참조해야 합니다.
			4. 	참조된 메타-어노테이션은 @AliasFor를 선언하는 어노테이션 클래스에 메타 존재해야 합니다.

		• 어노테이션 내의 암시적 별칭

			1. 	암시적 별칭 집합에 속하는 각 속성은 @AliasFor로 어노테이션을 달아야 하며, 
				속성은 동일한 메타-어노테이션의 동일한 속성을 참조해야 합니다.
				(직접적으로 또는 다른 명시적 메타-어노테이션 속성 재정의를 통해, 전이적으로 참조해야 함)
			2. 	별칭 속성은 동일한 반환 유형을 선언해야 합니다.
			3. 	별칭 속성은 기본값을 선언해야 합니다.
			4. 	별칭 속성은 동일한 기본값을 선언해야 합니다.
			5.	어노테이션은 적절한 메타-어노테이션을 참조해야 합니다.
			6. 	참조된 메타-어노테이션은 @AliasFor를 선언하는 어노테이션 클래스에 메타 존재해야 합니다.


	- 예1: 어노테이션 내의 속성들 간의 명시적 별칭

			@ContextConfiguration 에서 value 와 location 은 서로에 대한 명시적인 별칭입니다.

		  	public @interface ContextConfiguration {

				@AliasFor("location")
				=====================
				String[] value() 		default {};

				@AliasFor("value")
				=====================
				String[] location() 	default {};

				// ...
		  	}

	- 예2: 메타-어노테이션 속성에 대한 명시적 별칭

			@XmlTestConfig에서 xmlFiles는 @ContextConfiguration의 location 에 대한 명시적 별칭입니다.
			즉, xmlFiles는 @ContextConfiguration의 location 속성을 재정의합니다.

			@ContextConfiguration
			public @interface XmlTestConfig {

				@AliasFor( annotation = ContextConfiguration.class, attribute = "location" )
				============================================================================
				String[] xmlFiles();

			}

	- 예3: 어노테이션 내의 암시적 별칭

			@MyTestConfig에서 value, groovyScripts 및 xmlFiles는,
			모두 @ContextConfiguration의 location 속성에 대한 명시적 메타-어노테이션 속성 재정의 입니다.
			따라서, 이 세가지 특성은 서로에 대한 암시적 별칭이기도 합니다.

			@ContextConfiguration
			public @interface MyTestConfig {

				@AliasFor( annotation = ContextConfiguration.class, attribute = "location" )
				============================================================================
				String[] value() 			default {};

				@AliasFor( annotation = ContextConfiguration.class, attribute = "location" )
				============================================================================
				String[] groovyScripts() 	default {};

				@AliasFor( annotation = ContextConfiguration.class, attribute = "location" )
				============================================================================
				String[] xmlFiles() 		default {};

			}

	- 예4: 어노테이션 내의 전이적 암시적 별칭

			@GroovyOrXmlTestConfig 에서 groovy는 @MyTestConfig의 groovyScripts 속성에 대한 명시적 재정의인 반면, 
			xml은 @ContextConfiguration의 location 속성에 대한 명시적인 재정의입니다.

			게다가 groovy와 xml은 서로에 대한 전이적(transitive) 묵시적 별칭입니다.

			둘 다 효과적으로 @ContextConfiguration의 location 속성.

			@MyTestConfig
			public @interface GroovyOrXmlTestConfig {

				@AliasFor( annotation = MyTestConfig.class, attribute = "groovyScripts" )
				============================================================================
				String[] groovy() 	default {};

				@AliasFor( annotation = ContextConfiguration.class, attribute = "location" )
				============================================================================
				String[] xml() 		default {};

			}

	- 속성 별칭을 지원하는 Spring 어노테이션

		• Spring Framework 4.2부터 핵심 Spring 내의 여러 어노테이션이 @AliasFor를 사용하여, 
		  내부 속성별칭을 구성하도록 업데이트되었습니다.

		• 개별 주석에 대해서는 Javadoc을 참조하고 자세한 내용은 참조 매뉴얼을 참조하십시오.

		• 이후:• 4.2
